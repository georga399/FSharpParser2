# Generated from FSharpGrammar/FSharpParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,108,983,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,5,
        2,211,8,2,10,2,12,2,214,9,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,
        1,7,1,8,1,8,3,8,228,8,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,
        13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,4,15,250,
        8,15,11,15,12,15,251,1,15,3,15,255,8,15,4,15,257,8,15,11,15,12,15,
        258,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,
        1,21,1,21,1,21,1,21,1,21,1,21,5,21,279,8,21,10,21,12,21,282,9,21,
        1,21,1,21,1,21,1,21,1,21,1,21,5,21,290,8,21,10,21,12,21,293,9,21,
        1,21,1,21,3,21,297,8,21,1,21,1,21,4,21,301,8,21,11,21,12,21,302,
        1,21,3,21,306,8,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,
        5,22,317,8,22,10,22,12,22,320,9,22,1,22,1,22,3,22,324,8,22,1,22,
        1,22,1,22,3,22,329,8,22,1,23,1,23,4,23,333,8,23,11,23,12,23,334,
        1,23,1,23,1,23,1,24,1,24,1,24,4,24,343,8,24,11,24,12,24,344,1,25,
        1,25,1,25,3,25,350,8,25,1,26,1,26,4,26,354,8,26,11,26,12,26,355,
        1,26,1,26,3,26,360,8,26,1,26,4,26,363,8,26,11,26,12,26,364,1,26,
        5,26,368,8,26,10,26,12,26,371,9,26,1,26,3,26,374,8,26,1,27,1,27,
        3,27,378,8,27,1,28,1,28,4,28,382,8,28,11,28,12,28,383,1,28,1,28,
        3,28,388,8,28,1,28,4,28,391,8,28,11,28,12,28,392,1,29,1,29,4,29,
        397,8,29,11,29,12,29,398,1,29,1,29,3,29,403,8,29,1,30,1,30,4,30,
        407,8,30,11,30,12,30,408,1,30,1,30,4,30,413,8,30,11,30,12,30,414,
        1,30,1,30,3,30,419,8,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,
        1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,
        1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,
        1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,
        1,54,1,55,1,55,4,55,471,8,55,11,55,12,55,472,1,55,1,55,1,56,1,56,
        1,57,1,57,1,57,1,58,1,58,1,59,1,59,4,59,486,8,59,11,59,12,59,487,
        1,59,1,59,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,63,1,63,1,63,4,63,
        502,8,63,11,63,12,63,503,1,63,3,63,507,8,63,1,63,4,63,510,8,63,11,
        63,12,63,511,5,63,514,8,63,10,63,12,63,517,9,63,1,63,1,63,1,64,1,
        64,4,64,523,8,64,11,64,12,64,524,1,64,3,64,528,8,64,1,64,4,64,531,
        8,64,11,64,12,64,532,5,64,535,8,64,10,64,12,64,538,9,64,1,64,1,64,
        1,65,1,65,1,65,4,65,545,8,65,11,65,12,65,546,1,65,3,65,550,8,65,
        1,65,4,65,553,8,65,11,65,12,65,554,5,65,557,8,65,10,65,12,65,560,
        9,65,1,65,1,65,1,65,1,66,1,66,1,66,4,66,568,8,66,11,66,12,66,569,
        1,66,1,66,4,66,574,8,66,11,66,12,66,575,1,66,3,66,579,8,66,1,66,
        4,66,582,8,66,11,66,12,66,583,1,66,1,66,4,66,588,8,66,11,66,12,66,
        589,5,66,592,8,66,10,66,12,66,595,9,66,1,66,1,66,1,67,1,67,1,67,
        1,67,1,67,3,67,604,8,67,1,68,1,68,1,68,1,69,1,69,1,69,5,69,612,8,
        69,10,69,12,69,615,9,69,1,69,1,69,1,70,1,70,1,70,5,70,622,8,70,10,
        70,12,70,625,9,70,1,70,1,70,1,71,1,71,1,72,1,72,4,72,633,8,72,11,
        72,12,72,634,1,72,1,72,4,72,639,8,72,11,72,12,72,640,1,73,1,73,4,
        73,645,8,73,11,73,12,73,646,1,73,1,73,3,73,651,8,73,1,73,4,73,654,
        8,73,11,73,12,73,655,1,74,1,74,5,74,660,8,74,10,74,12,74,663,9,74,
        1,74,1,74,1,74,5,74,668,8,74,10,74,12,74,671,9,74,1,74,1,74,5,74,
        675,8,74,10,74,12,74,678,9,74,5,74,680,8,74,10,74,12,74,683,9,74,
        3,74,685,8,74,1,74,1,74,3,74,689,8,74,1,75,1,75,5,75,693,8,75,10,
        75,12,75,696,9,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,77,1,77,1,
        78,1,78,1,79,1,79,1,80,1,80,1,81,1,81,5,81,715,8,81,10,81,12,81,
        718,9,81,1,81,1,81,1,81,1,82,1,82,1,82,4,82,726,8,82,11,82,12,82,
        727,3,82,730,8,82,1,82,1,82,1,82,1,82,5,82,736,8,82,10,82,12,82,
        739,9,82,1,82,1,82,1,82,1,83,1,83,3,83,746,8,83,1,83,1,83,1,83,3,
        83,751,8,83,1,83,1,83,1,83,1,83,1,84,1,84,5,84,759,8,84,10,84,12,
        84,762,9,84,1,84,1,84,1,85,1,85,1,85,1,85,3,85,770,8,85,1,85,1,85,
        1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,781,8,85,1,85,1,85,5,85,
        785,8,85,10,85,12,85,788,9,85,1,85,1,85,3,85,792,8,85,1,85,1,85,
        1,85,1,85,3,85,798,8,85,1,85,5,85,801,8,85,10,85,12,85,804,9,85,
        1,85,1,85,3,85,808,8,85,1,86,1,86,1,86,1,86,4,86,814,8,86,11,86,
        12,86,815,1,86,1,86,1,87,1,87,1,88,1,88,1,88,1,88,1,88,5,88,827,
        8,88,10,88,12,88,830,9,88,1,88,5,88,833,8,88,10,88,12,88,836,9,88,
        1,88,1,88,5,88,840,8,88,10,88,12,88,843,9,88,3,88,845,8,88,1,88,
        1,88,1,89,1,89,1,90,1,90,1,90,1,90,3,90,855,8,90,1,90,1,90,4,90,
        859,8,90,11,90,12,90,860,1,91,1,91,1,92,1,92,1,93,1,93,1,94,1,94,
        1,95,1,95,1,96,1,96,1,97,1,97,1,98,1,98,1,98,1,98,3,98,881,8,98,
        1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
        1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
        1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
        1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
        1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
        1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
        1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,
        973,8,99,1,100,5,100,976,8,100,10,100,12,100,979,9,100,1,100,1,100,
        1,100,0,0,101,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
        38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
        82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
        152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
        184,186,188,190,192,194,196,198,200,0,2,1,0,21,23,1,0,3,4,1083,0,
        202,1,0,0,0,2,204,1,0,0,0,4,206,1,0,0,0,6,215,1,0,0,0,8,217,1,0,
        0,0,10,219,1,0,0,0,12,221,1,0,0,0,14,223,1,0,0,0,16,225,1,0,0,0,
        18,229,1,0,0,0,20,231,1,0,0,0,22,233,1,0,0,0,24,235,1,0,0,0,26,237,
        1,0,0,0,28,243,1,0,0,0,30,247,1,0,0,0,32,262,1,0,0,0,34,264,1,0,
        0,0,36,266,1,0,0,0,38,268,1,0,0,0,40,270,1,0,0,0,42,272,1,0,0,0,
        44,310,1,0,0,0,46,330,1,0,0,0,48,339,1,0,0,0,50,346,1,0,0,0,52,351,
        1,0,0,0,54,375,1,0,0,0,56,379,1,0,0,0,58,394,1,0,0,0,60,404,1,0,
        0,0,62,420,1,0,0,0,64,422,1,0,0,0,66,424,1,0,0,0,68,426,1,0,0,0,
        70,428,1,0,0,0,72,430,1,0,0,0,74,432,1,0,0,0,76,434,1,0,0,0,78,436,
        1,0,0,0,80,438,1,0,0,0,82,440,1,0,0,0,84,442,1,0,0,0,86,444,1,0,
        0,0,88,446,1,0,0,0,90,448,1,0,0,0,92,450,1,0,0,0,94,452,1,0,0,0,
        96,454,1,0,0,0,98,456,1,0,0,0,100,458,1,0,0,0,102,460,1,0,0,0,104,
        462,1,0,0,0,106,464,1,0,0,0,108,466,1,0,0,0,110,468,1,0,0,0,112,
        476,1,0,0,0,114,478,1,0,0,0,116,481,1,0,0,0,118,483,1,0,0,0,120,
        491,1,0,0,0,122,493,1,0,0,0,124,496,1,0,0,0,126,498,1,0,0,0,128,
        520,1,0,0,0,130,541,1,0,0,0,132,564,1,0,0,0,134,598,1,0,0,0,136,
        605,1,0,0,0,138,608,1,0,0,0,140,618,1,0,0,0,142,628,1,0,0,0,144,
        630,1,0,0,0,146,642,1,0,0,0,148,657,1,0,0,0,150,690,1,0,0,0,152,
        700,1,0,0,0,154,704,1,0,0,0,156,706,1,0,0,0,158,708,1,0,0,0,160,
        710,1,0,0,0,162,712,1,0,0,0,164,722,1,0,0,0,166,743,1,0,0,0,168,
        756,1,0,0,0,170,807,1,0,0,0,172,809,1,0,0,0,174,819,1,0,0,0,176,
        821,1,0,0,0,178,848,1,0,0,0,180,858,1,0,0,0,182,862,1,0,0,0,184,
        864,1,0,0,0,186,866,1,0,0,0,188,868,1,0,0,0,190,870,1,0,0,0,192,
        872,1,0,0,0,194,874,1,0,0,0,196,880,1,0,0,0,198,972,1,0,0,0,200,
        977,1,0,0,0,202,203,5,63,0,0,203,1,1,0,0,0,204,205,5,107,0,0,205,
        3,1,0,0,0,206,212,3,2,1,0,207,208,3,0,0,0,208,209,3,2,1,0,209,211,
        1,0,0,0,210,207,1,0,0,0,211,214,1,0,0,0,212,210,1,0,0,0,212,213,
        1,0,0,0,213,5,1,0,0,0,214,212,1,0,0,0,215,216,5,3,0,0,216,7,1,0,
        0,0,217,218,5,4,0,0,218,9,1,0,0,0,219,220,5,10,0,0,220,11,1,0,0,
        0,221,222,5,9,0,0,222,13,1,0,0,0,223,224,5,6,0,0,224,15,1,0,0,0,
        225,227,5,71,0,0,226,228,5,71,0,0,227,226,1,0,0,0,227,228,1,0,0,
        0,228,17,1,0,0,0,229,230,5,5,0,0,230,19,1,0,0,0,231,232,5,24,0,0,
        232,21,1,0,0,0,233,234,5,7,0,0,234,23,1,0,0,0,235,236,5,8,0,0,236,
        25,1,0,0,0,237,238,5,100,0,0,238,239,5,82,0,0,239,240,3,4,2,0,240,
        241,5,83,0,0,241,242,5,101,0,0,242,27,1,0,0,0,243,244,5,82,0,0,244,
        245,3,4,2,0,245,246,5,83,0,0,246,29,1,0,0,0,247,256,5,96,0,0,248,
        250,3,198,99,0,249,248,1,0,0,0,250,251,1,0,0,0,251,249,1,0,0,0,251,
        252,1,0,0,0,252,254,1,0,0,0,253,255,5,66,0,0,254,253,1,0,0,0,254,
        255,1,0,0,0,255,257,1,0,0,0,256,249,1,0,0,0,257,258,1,0,0,0,258,
        256,1,0,0,0,258,259,1,0,0,0,259,260,1,0,0,0,260,261,5,97,0,0,261,
        31,1,0,0,0,262,263,5,11,0,0,263,33,1,0,0,0,264,265,5,12,0,0,265,
        35,1,0,0,0,266,267,5,13,0,0,267,37,1,0,0,0,268,269,5,14,0,0,269,
        39,1,0,0,0,270,271,5,15,0,0,271,41,1,0,0,0,272,280,5,16,0,0,273,
        279,3,40,20,0,274,279,3,38,19,0,275,279,3,32,16,0,276,279,3,34,17,
        0,277,279,3,36,18,0,278,273,1,0,0,0,278,274,1,0,0,0,278,275,1,0,
        0,0,278,276,1,0,0,0,278,277,1,0,0,0,279,282,1,0,0,0,280,278,1,0,
        0,0,280,281,1,0,0,0,281,283,1,0,0,0,282,280,1,0,0,0,283,291,3,2,
        1,0,284,290,3,40,20,0,285,290,3,38,19,0,286,290,3,32,16,0,287,290,
        3,34,17,0,288,290,3,36,18,0,289,284,1,0,0,0,289,285,1,0,0,0,289,
        286,1,0,0,0,289,287,1,0,0,0,289,288,1,0,0,0,290,293,1,0,0,0,291,
        289,1,0,0,0,291,292,1,0,0,0,292,300,1,0,0,0,293,291,1,0,0,0,294,
        296,3,2,1,0,295,297,3,50,25,0,296,295,1,0,0,0,296,297,1,0,0,0,297,
        301,1,0,0,0,298,301,3,10,5,0,299,301,3,30,15,0,300,294,1,0,0,0,300,
        298,1,0,0,0,300,299,1,0,0,0,301,302,1,0,0,0,302,300,1,0,0,0,302,
        303,1,0,0,0,303,305,1,0,0,0,304,306,3,50,25,0,305,304,1,0,0,0,305,
        306,1,0,0,0,306,307,1,0,0,0,307,308,3,84,42,0,308,309,3,198,99,0,
        309,43,1,0,0,0,310,318,5,16,0,0,311,317,3,40,20,0,312,317,3,38,19,
        0,313,317,3,32,16,0,314,317,3,34,17,0,315,317,3,36,18,0,316,311,
        1,0,0,0,316,312,1,0,0,0,316,313,1,0,0,0,316,314,1,0,0,0,316,315,
        1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,318,319,1,0,0,0,319,321,
        1,0,0,0,320,318,1,0,0,0,321,323,3,2,1,0,322,324,3,50,25,0,323,322,
        1,0,0,0,323,324,1,0,0,0,324,328,1,0,0,0,325,326,3,84,42,0,326,327,
        3,198,99,0,327,329,1,0,0,0,328,325,1,0,0,0,328,329,1,0,0,0,329,45,
        1,0,0,0,330,332,5,17,0,0,331,333,3,198,99,0,332,331,1,0,0,0,333,
        334,1,0,0,0,334,332,1,0,0,0,334,335,1,0,0,0,335,336,1,0,0,0,336,
        337,5,72,0,0,337,338,3,198,99,0,338,47,1,0,0,0,339,342,3,4,2,0,340,
        341,5,72,0,0,341,343,3,4,2,0,342,340,1,0,0,0,343,344,1,0,0,0,344,
        342,1,0,0,0,344,345,1,0,0,0,345,49,1,0,0,0,346,349,5,68,0,0,347,
        350,3,30,15,0,348,350,3,4,2,0,349,347,1,0,0,0,349,348,1,0,0,0,350,
        51,1,0,0,0,351,353,5,103,0,0,352,354,3,198,99,0,353,352,1,0,0,0,
        354,355,1,0,0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,357,1,0,0,0,
        357,359,5,43,0,0,358,360,3,196,98,0,359,358,1,0,0,0,359,360,1,0,
        0,0,360,362,1,0,0,0,361,363,3,198,99,0,362,361,1,0,0,0,363,364,1,
        0,0,0,364,362,1,0,0,0,364,365,1,0,0,0,365,369,1,0,0,0,366,368,3,
        56,28,0,367,366,1,0,0,0,368,371,1,0,0,0,369,367,1,0,0,0,369,370,
        1,0,0,0,370,373,1,0,0,0,371,369,1,0,0,0,372,374,3,54,27,0,373,372,
        1,0,0,0,373,374,1,0,0,0,374,53,1,0,0,0,375,377,5,105,0,0,376,378,
        3,196,98,0,377,376,1,0,0,0,377,378,1,0,0,0,378,55,1,0,0,0,379,381,
        5,104,0,0,380,382,3,198,99,0,381,380,1,0,0,0,382,383,1,0,0,0,383,
        381,1,0,0,0,383,384,1,0,0,0,384,385,1,0,0,0,385,387,5,43,0,0,386,
        388,3,196,98,0,387,386,1,0,0,0,387,388,1,0,0,0,388,390,1,0,0,0,389,
        391,3,198,99,0,390,389,1,0,0,0,391,392,1,0,0,0,392,390,1,0,0,0,392,
        393,1,0,0,0,393,57,1,0,0,0,394,396,5,18,0,0,395,397,3,198,99,0,396,
        395,1,0,0,0,397,398,1,0,0,0,398,396,1,0,0,0,398,399,1,0,0,0,399,
        400,1,0,0,0,400,402,5,19,0,0,401,403,3,196,98,0,402,401,1,0,0,0,
        402,403,1,0,0,0,403,59,1,0,0,0,404,406,5,20,0,0,405,407,3,198,99,
        0,406,405,1,0,0,0,407,408,1,0,0,0,408,406,1,0,0,0,408,409,1,0,0,
        0,409,410,1,0,0,0,410,412,7,0,0,0,411,413,3,198,99,0,412,411,1,0,
        0,0,413,414,1,0,0,0,414,412,1,0,0,0,414,415,1,0,0,0,415,416,1,0,
        0,0,416,418,5,19,0,0,417,419,3,196,98,0,418,417,1,0,0,0,418,419,
        1,0,0,0,419,61,1,0,0,0,420,421,5,74,0,0,421,63,1,0,0,0,422,423,5,
        76,0,0,423,65,1,0,0,0,424,425,5,77,0,0,425,67,1,0,0,0,426,427,5,
        75,0,0,427,69,1,0,0,0,428,429,5,78,0,0,429,71,1,0,0,0,430,431,5,
        79,0,0,431,73,1,0,0,0,432,433,5,81,0,0,433,75,1,0,0,0,434,435,5,
        82,0,0,435,77,1,0,0,0,436,437,5,84,0,0,437,79,1,0,0,0,438,439,5,
        83,0,0,439,81,1,0,0,0,440,441,5,85,0,0,441,83,1,0,0,0,442,443,5,
        80,0,0,443,85,1,0,0,0,444,445,5,86,0,0,445,87,1,0,0,0,446,447,5,
        87,0,0,447,89,1,0,0,0,448,449,5,88,0,0,449,91,1,0,0,0,450,451,5,
        89,0,0,451,93,1,0,0,0,452,453,5,90,0,0,453,95,1,0,0,0,454,455,5,
        91,0,0,455,97,1,0,0,0,456,457,5,92,0,0,457,99,1,0,0,0,458,459,5,
        93,0,0,459,101,1,0,0,0,460,461,5,94,0,0,461,103,1,0,0,0,462,463,
        5,70,0,0,463,105,1,0,0,0,464,465,5,73,0,0,465,107,1,0,0,0,466,467,
        5,69,0,0,467,109,1,0,0,0,468,470,5,25,0,0,469,471,3,198,99,0,470,
        469,1,0,0,0,471,472,1,0,0,0,472,470,1,0,0,0,472,473,1,0,0,0,473,
        474,1,0,0,0,474,475,5,80,0,0,475,111,1,0,0,0,476,477,5,26,0,0,477,
        113,1,0,0,0,478,479,5,27,0,0,479,480,3,4,2,0,480,115,1,0,0,0,481,
        482,5,28,0,0,482,117,1,0,0,0,483,485,5,29,0,0,484,486,3,198,99,0,
        485,484,1,0,0,0,486,487,1,0,0,0,487,485,1,0,0,0,487,488,1,0,0,0,
        488,489,1,0,0,0,489,490,5,30,0,0,490,119,1,0,0,0,491,492,5,19,0,
        0,492,121,1,0,0,0,493,494,5,42,0,0,494,495,3,198,99,0,495,123,1,
        0,0,0,496,497,5,60,0,0,497,125,1,0,0,0,498,499,5,46,0,0,499,501,
        5,98,0,0,500,502,3,198,99,0,501,500,1,0,0,0,502,503,1,0,0,0,503,
        501,1,0,0,0,503,504,1,0,0,0,504,515,1,0,0,0,505,507,5,67,0,0,506,
        505,1,0,0,0,506,507,1,0,0,0,507,509,1,0,0,0,508,510,3,198,99,0,509,
        508,1,0,0,0,510,511,1,0,0,0,511,509,1,0,0,0,511,512,1,0,0,0,512,
        514,1,0,0,0,513,506,1,0,0,0,514,517,1,0,0,0,515,513,1,0,0,0,515,
        516,1,0,0,0,516,518,1,0,0,0,517,515,1,0,0,0,518,519,5,99,0,0,519,
        127,1,0,0,0,520,522,5,100,0,0,521,523,3,198,99,0,522,521,1,0,0,0,
        523,524,1,0,0,0,524,522,1,0,0,0,524,525,1,0,0,0,525,536,1,0,0,0,
        526,528,5,67,0,0,527,526,1,0,0,0,527,528,1,0,0,0,528,530,1,0,0,0,
        529,531,3,198,99,0,530,529,1,0,0,0,531,532,1,0,0,0,532,530,1,0,0,
        0,532,533,1,0,0,0,533,535,1,0,0,0,534,527,1,0,0,0,535,538,1,0,0,
        0,536,534,1,0,0,0,536,537,1,0,0,0,537,539,1,0,0,0,538,536,1,0,0,
        0,539,540,5,101,0,0,540,129,1,0,0,0,541,542,5,100,0,0,542,544,5,
        106,0,0,543,545,3,198,99,0,544,543,1,0,0,0,545,546,1,0,0,0,546,544,
        1,0,0,0,546,547,1,0,0,0,547,558,1,0,0,0,548,550,5,67,0,0,549,548,
        1,0,0,0,549,550,1,0,0,0,550,552,1,0,0,0,551,553,3,198,99,0,552,551,
        1,0,0,0,553,554,1,0,0,0,554,552,1,0,0,0,554,555,1,0,0,0,555,557,
        1,0,0,0,556,549,1,0,0,0,557,560,1,0,0,0,558,556,1,0,0,0,558,559,
        1,0,0,0,559,561,1,0,0,0,560,558,1,0,0,0,561,562,5,106,0,0,562,563,
        5,101,0,0,563,131,1,0,0,0,564,565,5,47,0,0,565,567,5,100,0,0,566,
        568,3,198,99,0,567,566,1,0,0,0,568,569,1,0,0,0,569,567,1,0,0,0,569,
        570,1,0,0,0,570,571,1,0,0,0,571,573,5,66,0,0,572,574,3,198,99,0,
        573,572,1,0,0,0,574,575,1,0,0,0,575,573,1,0,0,0,575,576,1,0,0,0,
        576,593,1,0,0,0,577,579,5,67,0,0,578,577,1,0,0,0,578,579,1,0,0,0,
        579,581,1,0,0,0,580,582,3,198,99,0,581,580,1,0,0,0,582,583,1,0,0,
        0,583,581,1,0,0,0,583,584,1,0,0,0,584,585,1,0,0,0,585,587,5,66,0,
        0,586,588,3,198,99,0,587,586,1,0,0,0,588,589,1,0,0,0,589,587,1,0,
        0,0,589,590,1,0,0,0,590,592,1,0,0,0,591,578,1,0,0,0,592,595,1,0,
        0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,596,1,0,0,0,595,593,1,0,
        0,0,596,597,5,101,0,0,597,133,1,0,0,0,598,599,7,1,0,0,599,600,5,
        64,0,0,600,603,7,1,0,0,601,602,5,64,0,0,602,604,7,1,0,0,603,601,
        1,0,0,0,603,604,1,0,0,0,604,135,1,0,0,0,605,606,5,48,0,0,606,607,
        3,198,99,0,607,137,1,0,0,0,608,609,5,40,0,0,609,613,5,98,0,0,610,
        612,3,198,99,0,611,610,1,0,0,0,612,615,1,0,0,0,613,611,1,0,0,0,613,
        614,1,0,0,0,614,616,1,0,0,0,615,613,1,0,0,0,616,617,5,99,0,0,617,
        139,1,0,0,0,618,619,5,41,0,0,619,623,5,98,0,0,620,622,3,198,99,0,
        621,620,1,0,0,0,622,625,1,0,0,0,623,621,1,0,0,0,623,624,1,0,0,0,
        624,626,1,0,0,0,625,623,1,0,0,0,626,627,5,99,0,0,627,141,1,0,0,0,
        628,629,5,65,0,0,629,143,1,0,0,0,630,632,5,56,0,0,631,633,3,198,
        99,0,632,631,1,0,0,0,633,634,1,0,0,0,634,632,1,0,0,0,634,635,1,0,
        0,0,635,636,1,0,0,0,636,638,5,57,0,0,637,639,3,146,73,0,638,637,
        1,0,0,0,639,640,1,0,0,0,640,638,1,0,0,0,640,641,1,0,0,0,641,145,
        1,0,0,0,642,644,5,106,0,0,643,645,3,198,99,0,644,643,1,0,0,0,645,
        646,1,0,0,0,646,644,1,0,0,0,646,647,1,0,0,0,647,648,1,0,0,0,648,
        650,5,72,0,0,649,651,3,196,98,0,650,649,1,0,0,0,650,651,1,0,0,0,
        651,653,1,0,0,0,652,654,3,198,99,0,653,652,1,0,0,0,654,655,1,0,0,
        0,655,653,1,0,0,0,655,656,1,0,0,0,656,147,1,0,0,0,657,661,5,54,0,
        0,658,660,3,198,99,0,659,658,1,0,0,0,660,663,1,0,0,0,661,659,1,0,
        0,0,661,662,1,0,0,0,662,684,1,0,0,0,663,661,1,0,0,0,664,681,5,57,
        0,0,665,669,5,106,0,0,666,668,3,198,99,0,667,666,1,0,0,0,668,671,
        1,0,0,0,669,667,1,0,0,0,669,670,1,0,0,0,670,672,1,0,0,0,671,669,
        1,0,0,0,672,676,5,72,0,0,673,675,3,198,99,0,674,673,1,0,0,0,675,
        678,1,0,0,0,676,674,1,0,0,0,676,677,1,0,0,0,677,680,1,0,0,0,678,
        676,1,0,0,0,679,665,1,0,0,0,680,683,1,0,0,0,681,679,1,0,0,0,681,
        682,1,0,0,0,682,685,1,0,0,0,683,681,1,0,0,0,684,664,1,0,0,0,684,
        685,1,0,0,0,685,688,1,0,0,0,686,687,5,55,0,0,687,689,3,198,99,0,
        688,686,1,0,0,0,688,689,1,0,0,0,689,149,1,0,0,0,690,694,5,58,0,0,
        691,693,3,198,99,0,692,691,1,0,0,0,693,696,1,0,0,0,694,692,1,0,0,
        0,694,695,1,0,0,0,695,697,1,0,0,0,696,694,1,0,0,0,697,698,5,80,0,
        0,698,699,3,198,99,0,699,151,1,0,0,0,700,701,5,59,0,0,701,702,3,
        30,15,0,702,703,3,198,99,0,703,153,1,0,0,0,704,705,5,49,0,0,705,
        155,1,0,0,0,706,707,5,50,0,0,707,157,1,0,0,0,708,709,5,51,0,0,709,
        159,1,0,0,0,710,711,5,52,0,0,711,161,1,0,0,0,712,716,5,61,0,0,713,
        715,3,198,99,0,714,713,1,0,0,0,715,718,1,0,0,0,716,714,1,0,0,0,716,
        717,1,0,0,0,717,719,1,0,0,0,718,716,1,0,0,0,719,720,5,62,0,0,720,
        721,3,198,99,0,721,163,1,0,0,0,722,729,5,45,0,0,723,730,5,44,0,0,
        724,726,5,71,0,0,725,724,1,0,0,0,726,727,1,0,0,0,727,725,1,0,0,0,
        727,728,1,0,0,0,728,730,1,0,0,0,729,723,1,0,0,0,729,725,1,0,0,0,
        730,731,1,0,0,0,731,732,3,0,0,0,732,737,3,2,1,0,733,736,3,2,1,0,
        734,736,3,10,5,0,735,733,1,0,0,0,735,734,1,0,0,0,736,739,1,0,0,0,
        737,735,1,0,0,0,737,738,1,0,0,0,738,740,1,0,0,0,739,737,1,0,0,0,
        740,741,3,84,42,0,741,742,3,198,99,0,742,165,1,0,0,0,743,745,5,53,
        0,0,744,746,3,40,20,0,745,744,1,0,0,0,745,746,1,0,0,0,746,750,1,
        0,0,0,747,751,3,38,19,0,748,751,3,34,17,0,749,751,3,36,18,0,750,
        747,1,0,0,0,750,748,1,0,0,0,750,749,1,0,0,0,750,751,1,0,0,0,751,
        752,1,0,0,0,752,753,3,4,2,0,753,754,5,68,0,0,754,755,3,4,2,0,755,
        167,1,0,0,0,756,760,5,31,0,0,757,759,3,198,99,0,758,757,1,0,0,0,
        759,762,1,0,0,0,760,758,1,0,0,0,760,761,1,0,0,0,761,763,1,0,0,0,
        762,760,1,0,0,0,763,764,5,30,0,0,764,169,1,0,0,0,765,769,5,57,0,
        0,766,770,3,36,18,0,767,770,3,38,19,0,768,770,3,34,17,0,769,766,
        1,0,0,0,769,767,1,0,0,0,769,768,1,0,0,0,769,770,1,0,0,0,770,771,
        1,0,0,0,771,772,5,34,0,0,772,773,5,10,0,0,773,774,5,80,0,0,774,775,
        3,198,99,0,775,776,1,0,0,0,776,791,5,86,0,0,777,781,3,36,18,0,778,
        781,3,38,19,0,779,781,3,34,17,0,780,777,1,0,0,0,780,778,1,0,0,0,
        780,779,1,0,0,0,780,781,1,0,0,0,781,782,1,0,0,0,782,786,5,48,0,0,
        783,785,3,198,99,0,784,783,1,0,0,0,785,788,1,0,0,0,786,784,1,0,0,
        0,786,787,1,0,0,0,787,789,1,0,0,0,788,786,1,0,0,0,789,790,5,80,0,
        0,790,792,3,198,99,0,791,780,1,0,0,0,791,792,1,0,0,0,792,808,1,0,
        0,0,793,797,5,57,0,0,794,798,3,36,18,0,795,798,3,38,19,0,796,798,
        3,34,17,0,797,794,1,0,0,0,797,795,1,0,0,0,797,796,1,0,0,0,797,798,
        1,0,0,0,798,802,1,0,0,0,799,801,3,198,99,0,800,799,1,0,0,0,801,804,
        1,0,0,0,802,800,1,0,0,0,802,803,1,0,0,0,803,805,1,0,0,0,804,802,
        1,0,0,0,805,806,5,80,0,0,806,808,3,198,99,0,807,765,1,0,0,0,807,
        793,1,0,0,0,808,171,1,0,0,0,809,810,5,96,0,0,810,813,3,198,99,0,
        811,812,5,66,0,0,812,814,3,198,99,0,813,811,1,0,0,0,814,815,1,0,
        0,0,815,813,1,0,0,0,815,816,1,0,0,0,816,817,1,0,0,0,817,818,5,97,
        0,0,818,173,1,0,0,0,819,820,5,57,0,0,820,175,1,0,0,0,821,844,5,98,
        0,0,822,823,3,198,99,0,823,824,5,68,0,0,824,825,3,4,2,0,825,827,
        1,0,0,0,826,822,1,0,0,0,827,830,1,0,0,0,828,826,1,0,0,0,828,829,
        1,0,0,0,829,845,1,0,0,0,830,828,1,0,0,0,831,833,3,198,99,0,832,831,
        1,0,0,0,833,836,1,0,0,0,834,832,1,0,0,0,834,835,1,0,0,0,835,837,
        1,0,0,0,836,834,1,0,0,0,837,841,3,174,87,0,838,840,3,198,99,0,839,
        838,1,0,0,0,840,843,1,0,0,0,841,839,1,0,0,0,841,842,1,0,0,0,842,
        845,1,0,0,0,843,841,1,0,0,0,844,828,1,0,0,0,844,834,1,0,0,0,845,
        846,1,0,0,0,846,847,5,99,0,0,847,177,1,0,0,0,848,849,5,62,0,0,849,
        179,1,0,0,0,850,851,5,106,0,0,851,854,3,4,2,0,852,855,3,84,42,0,
        853,855,3,178,89,0,854,852,1,0,0,0,854,853,1,0,0,0,855,856,1,0,0,
        0,856,857,3,4,2,0,857,859,1,0,0,0,858,850,1,0,0,0,859,860,1,0,0,
        0,860,858,1,0,0,0,860,861,1,0,0,0,861,181,1,0,0,0,862,863,5,35,0,
        0,863,183,1,0,0,0,864,865,5,37,0,0,865,185,1,0,0,0,866,867,5,36,
        0,0,867,187,1,0,0,0,868,869,5,38,0,0,869,189,1,0,0,0,870,871,5,39,
        0,0,871,191,1,0,0,0,872,873,5,95,0,0,873,193,1,0,0,0,874,875,5,33,
        0,0,875,195,1,0,0,0,876,881,3,52,26,0,877,881,3,58,29,0,878,881,
        3,60,30,0,879,881,3,144,72,0,880,876,1,0,0,0,880,877,1,0,0,0,880,
        878,1,0,0,0,880,879,1,0,0,0,881,197,1,0,0,0,882,973,3,4,2,0,883,
        973,3,0,0,0,884,973,3,6,3,0,885,973,3,8,4,0,886,973,3,12,6,0,887,
        973,3,14,7,0,888,973,3,10,5,0,889,973,3,16,8,0,890,973,3,22,11,0,
        891,973,3,26,13,0,892,973,3,28,14,0,893,973,3,42,21,0,894,973,3,
        44,22,0,895,973,3,30,15,0,896,973,3,32,16,0,897,973,3,34,17,0,898,
        973,3,36,18,0,899,973,3,38,19,0,900,973,3,40,20,0,901,973,3,46,23,
        0,902,973,3,50,25,0,903,973,3,52,26,0,904,973,3,58,29,0,905,973,
        3,60,30,0,906,973,3,62,31,0,907,973,3,64,32,0,908,973,3,66,33,0,
        909,973,3,68,34,0,910,973,3,70,35,0,911,973,3,72,36,0,912,973,3,
        74,37,0,913,973,3,76,38,0,914,973,3,78,39,0,915,973,3,80,40,0,916,
        973,3,82,41,0,917,973,3,84,42,0,918,973,3,86,43,0,919,973,3,88,44,
        0,920,973,3,90,45,0,921,973,3,92,46,0,922,973,3,94,47,0,923,973,
        3,96,48,0,924,973,3,98,49,0,925,973,3,100,50,0,926,973,3,102,51,
        0,927,973,3,104,52,0,928,973,3,106,53,0,929,973,3,108,54,0,930,973,
        3,48,24,0,931,973,3,110,55,0,932,973,3,112,56,0,933,973,3,114,57,
        0,934,973,3,116,58,0,935,973,3,118,59,0,936,973,3,120,60,0,937,973,
        3,122,61,0,938,973,3,126,63,0,939,973,3,134,67,0,940,973,3,128,64,
        0,941,973,3,130,65,0,942,973,3,132,66,0,943,973,3,138,69,0,944,973,
        3,140,70,0,945,973,3,142,71,0,946,973,3,144,72,0,947,973,3,148,74,
        0,948,973,3,150,75,0,949,973,3,152,76,0,950,973,3,154,77,0,951,973,
        3,156,78,0,952,973,3,158,79,0,953,973,3,160,80,0,954,973,3,162,81,
        0,955,973,3,164,82,0,956,973,3,166,83,0,957,973,3,168,84,0,958,973,
        3,170,85,0,959,973,3,172,86,0,960,973,3,174,87,0,961,973,3,176,88,
        0,962,973,3,180,90,0,963,973,3,182,91,0,964,973,3,184,92,0,965,973,
        3,186,93,0,966,973,3,188,94,0,967,973,3,190,95,0,968,973,3,192,96,
        0,969,973,3,24,12,0,970,973,3,194,97,0,971,973,3,124,62,0,972,882,
        1,0,0,0,972,883,1,0,0,0,972,884,1,0,0,0,972,885,1,0,0,0,972,886,
        1,0,0,0,972,887,1,0,0,0,972,888,1,0,0,0,972,889,1,0,0,0,972,890,
        1,0,0,0,972,891,1,0,0,0,972,892,1,0,0,0,972,893,1,0,0,0,972,894,
        1,0,0,0,972,895,1,0,0,0,972,896,1,0,0,0,972,897,1,0,0,0,972,898,
        1,0,0,0,972,899,1,0,0,0,972,900,1,0,0,0,972,901,1,0,0,0,972,902,
        1,0,0,0,972,903,1,0,0,0,972,904,1,0,0,0,972,905,1,0,0,0,972,906,
        1,0,0,0,972,907,1,0,0,0,972,908,1,0,0,0,972,909,1,0,0,0,972,910,
        1,0,0,0,972,911,1,0,0,0,972,912,1,0,0,0,972,913,1,0,0,0,972,914,
        1,0,0,0,972,915,1,0,0,0,972,916,1,0,0,0,972,917,1,0,0,0,972,918,
        1,0,0,0,972,919,1,0,0,0,972,920,1,0,0,0,972,921,1,0,0,0,972,922,
        1,0,0,0,972,923,1,0,0,0,972,924,1,0,0,0,972,925,1,0,0,0,972,926,
        1,0,0,0,972,927,1,0,0,0,972,928,1,0,0,0,972,929,1,0,0,0,972,930,
        1,0,0,0,972,931,1,0,0,0,972,932,1,0,0,0,972,933,1,0,0,0,972,934,
        1,0,0,0,972,935,1,0,0,0,972,936,1,0,0,0,972,937,1,0,0,0,972,938,
        1,0,0,0,972,939,1,0,0,0,972,940,1,0,0,0,972,941,1,0,0,0,972,942,
        1,0,0,0,972,943,1,0,0,0,972,944,1,0,0,0,972,945,1,0,0,0,972,946,
        1,0,0,0,972,947,1,0,0,0,972,948,1,0,0,0,972,949,1,0,0,0,972,950,
        1,0,0,0,972,951,1,0,0,0,972,952,1,0,0,0,972,953,1,0,0,0,972,954,
        1,0,0,0,972,955,1,0,0,0,972,956,1,0,0,0,972,957,1,0,0,0,972,958,
        1,0,0,0,972,959,1,0,0,0,972,960,1,0,0,0,972,961,1,0,0,0,972,962,
        1,0,0,0,972,963,1,0,0,0,972,964,1,0,0,0,972,965,1,0,0,0,972,966,
        1,0,0,0,972,967,1,0,0,0,972,968,1,0,0,0,972,969,1,0,0,0,972,970,
        1,0,0,0,972,971,1,0,0,0,973,199,1,0,0,0,974,976,3,198,99,0,975,974,
        1,0,0,0,976,979,1,0,0,0,977,975,1,0,0,0,977,978,1,0,0,0,978,980,
        1,0,0,0,979,977,1,0,0,0,980,981,5,0,0,1,981,201,1,0,0,0,94,212,227,
        251,254,258,278,280,289,291,296,300,302,305,316,318,323,328,334,
        344,349,355,359,364,369,373,377,383,387,392,398,402,408,414,418,
        472,487,503,506,511,515,524,527,532,536,546,549,554,558,569,575,
        578,583,589,593,603,613,623,634,640,646,650,655,661,669,676,681,
        684,688,694,716,727,729,735,737,745,750,760,769,780,786,791,797,
        802,807,815,828,834,841,844,854,860,880,972,977
    ]

class FSharpParser ( Parser ):

    grammarFileName = "FSharpParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'rec'", "'public'", 
                     "'private'", "'internal'", "'mutable'", "'let'", "'fun'", 
                     "'while'", "'do'", "'for'", "'to'", "'downto'", "'in'", 
                     "'$'", "'type'", "'module'", "'open'", "'namespace'", 
                     "'class'", "'end'", "'struct'", "'and'", "'interface'", 
                     "'get'", "'inherit'", "'override'", "'default'", "'abstract'", 
                     "'base'", "'async'", "'task'", "'new'", "'then'", "'this'", 
                     "'member'", "'seq'", "'Map'", "'set'", "'raise'", "'reraise'", 
                     "'failwith'", "'invalidArg'", "'val'", "'try'", "'finally'", 
                     "'match'", "'with'", "'use'", "'using'", "'when'", 
                     "'exception'", "'of'", "'.'", "'..'", "'!'", "','", 
                     "';'", "':'", "'<-'", "'|>'", "'_'", "'->'", "'>>'", 
                     "'+'", "'-'", "'*'", "'/'", "'**'", "'%'", "'='", "'<>'", 
                     "'<'", "'>'", "'<='", "'>='", "'&&'", "'||'", "'<<<'", 
                     "'>>>'", "'&&&'", "'|||'", "'^^^'", "'~~~'", "'not'", 
                     "':?'", "'('", "')'", "'{'", "'}'", "'['", "']'", "'\"'", 
                     "'if'", "'elif'", "'else'", "'|'" ]

    symbolicNames = [ "<INVALID>", "WHITE_SPACE", "COMMENT", "INT", "FLOAT", 
                      "INTERPOLATIONSIGN", "CHAR", "STRING", "INTERPOLATED_STRING", 
                      "BOOL", "UNIT", "REC", "PUBLIC", "PRIVATE", "INTERNAL", 
                      "MUTABLE", "LET", "FUN", "WHILE", "DO", "FOR", "TO", 
                      "DOWNTO", "IN", "DOLLAR", "TYPE", "MODULE", "OPEN", 
                      "NAMESPACE", "CLASS", "END", "STRUCT", "WITH_AND", 
                      "INTERFACE", "GET", "INHERIT", "OVERRIDE", "DEFAULT", 
                      "ABSTRACT", "BASE", "ASYNC", "TASK", "NEW", "THEN", 
                      "THIS", "MEMBER", "SEQ", "MAP", "SET", "RAISE", "RERAISE", 
                      "FAILWITH", "INVALIDARG", "VAL", "TRY", "FINALLY", 
                      "MATCH", "WITH", "USE", "USING", "WHEN", "EXCEPTION", 
                      "OF", "DOT", "DOTDOT", "EXCLAMATION_MARK", "COMMA", 
                      "SEMICOLON", "COLON", "ASSIGN", "PIPE", "MISSING_ARG", 
                      "RIGHT_ARROW", "COMPOS", "ADD", "MINUS", "MUL", "DIV", 
                      "POW", "MOD", "EQUAL", "NOT_EQUAL", "LESS", "GREATER", 
                      "LESS_EQUAL", "GREATER_EQUAL", "AND", "OR", "LSHIFT", 
                      "RSHIFT", "LOG_MUL", "LOG_ADD", "LOG_XOR", "LOG_NOT", 
                      "NOT", "COLON_Q", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
                      "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "DOUBLE_QUOTES", 
                      "IF", "ELIF", "ELSE", "VERTICAL_LINE", "IDENTIFIER", 
                      "SINGLE_CHARACTER" ]

    RULE_dot = 0
    RULE_identifier = 1
    RULE_dotIentifier = 2
    RULE_int = 3
    RULE_float = 4
    RULE_unit = 5
    RULE_bool = 6
    RULE_char = 7
    RULE_underscore = 8
    RULE_interpolationSign = 9
    RULE_dollar = 10
    RULE_string = 11
    RULE_interpolated_string = 12
    RULE_attribute = 13
    RULE_generic = 14
    RULE_round_brackets = 15
    RULE_rec = 16
    RULE_public = 17
    RULE_private = 18
    RULE_internal = 19
    RULE_mutable = 20
    RULE_let_fun = 21
    RULE_let_var = 22
    RULE_fun = 23
    RULE_fun_type = 24
    RULE_typezation = 25
    RULE_if_then_elif_else = 26
    RULE_else_expression = 27
    RULE_elif_expression = 28
    RULE_while_do = 29
    RULE_for = 30
    RULE_add = 31
    RULE_mul = 32
    RULE_div = 33
    RULE_minus = 34
    RULE_pow = 35
    RULE_mod = 36
    RULE_not_equal = 37
    RULE_less = 38
    RULE_less_equal = 39
    RULE_greater = 40
    RULE_greater_equal = 41
    RULE_equal = 42
    RULE_and = 43
    RULE_or = 44
    RULE_lshift = 45
    RULE_rshift = 46
    RULE_log_mul = 47
    RULE_log_add = 48
    RULE_log_xor = 49
    RULE_log_not = 50
    RULE_not = 51
    RULE_pipe = 52
    RULE_compos = 53
    RULE_assign = 54
    RULE_type = 55
    RULE_module = 56
    RULE_open = 57
    RULE_namespace = 58
    RULE_class = 59
    RULE_do = 60
    RULE_new = 61
    RULE_when = 62
    RULE_seq = 63
    RULE_list = 64
    RULE_array = 65
    RULE_map = 66
    RULE_generator = 67
    RULE_set = 68
    RULE_async_rule = 69
    RULE_task = 70
    RULE_exclamation_mark = 71
    RULE_match_with = 72
    RULE_match_case = 73
    RULE_try_with_finally = 74
    RULE_use = 75
    RULE_using = 76
    RULE_raise = 77
    RULE_reraise = 78
    RULE_failwith = 79
    RULE_invalidArg = 80
    RULE_exception_of = 81
    RULE_member = 82
    RULE_val = 83
    RULE_struct = 84
    RULE_with_get_set = 85
    RULE_tuple = 86
    RULE_with = 87
    RULE_record = 88
    RULE_of = 89
    RULE_enum = 90
    RULE_inherit = 91
    RULE_default = 92
    RULE_override = 93
    RULE_abstract = 94
    RULE_base = 95
    RULE_colon_q = 96
    RULE_interface = 97
    RULE_cond_ops = 98
    RULE_expression = 99
    RULE_exprs = 100

    ruleNames =  [ "dot", "identifier", "dotIentifier", "int", "float", 
                   "unit", "bool", "char", "underscore", "interpolationSign", 
                   "dollar", "string", "interpolated_string", "attribute", 
                   "generic", "round_brackets", "rec", "public", "private", 
                   "internal", "mutable", "let_fun", "let_var", "fun", "fun_type", 
                   "typezation", "if_then_elif_else", "else_expression", 
                   "elif_expression", "while_do", "for", "add", "mul", "div", 
                   "minus", "pow", "mod", "not_equal", "less", "less_equal", 
                   "greater", "greater_equal", "equal", "and", "or", "lshift", 
                   "rshift", "log_mul", "log_add", "log_xor", "log_not", 
                   "not", "pipe", "compos", "assign", "type", "module", 
                   "open", "namespace", "class", "do", "new", "when", "seq", 
                   "list", "array", "map", "generator", "set", "async_rule", 
                   "task", "exclamation_mark", "match_with", "match_case", 
                   "try_with_finally", "use", "using", "raise", "reraise", 
                   "failwith", "invalidArg", "exception_of", "member", "val", 
                   "struct", "with_get_set", "tuple", "with", "record", 
                   "of", "enum", "inherit", "default", "override", "abstract", 
                   "base", "colon_q", "interface", "cond_ops", "expression", 
                   "exprs" ]

    EOF = Token.EOF
    WHITE_SPACE=1
    COMMENT=2
    INT=3
    FLOAT=4
    INTERPOLATIONSIGN=5
    CHAR=6
    STRING=7
    INTERPOLATED_STRING=8
    BOOL=9
    UNIT=10
    REC=11
    PUBLIC=12
    PRIVATE=13
    INTERNAL=14
    MUTABLE=15
    LET=16
    FUN=17
    WHILE=18
    DO=19
    FOR=20
    TO=21
    DOWNTO=22
    IN=23
    DOLLAR=24
    TYPE=25
    MODULE=26
    OPEN=27
    NAMESPACE=28
    CLASS=29
    END=30
    STRUCT=31
    WITH_AND=32
    INTERFACE=33
    GET=34
    INHERIT=35
    OVERRIDE=36
    DEFAULT=37
    ABSTRACT=38
    BASE=39
    ASYNC=40
    TASK=41
    NEW=42
    THEN=43
    THIS=44
    MEMBER=45
    SEQ=46
    MAP=47
    SET=48
    RAISE=49
    RERAISE=50
    FAILWITH=51
    INVALIDARG=52
    VAL=53
    TRY=54
    FINALLY=55
    MATCH=56
    WITH=57
    USE=58
    USING=59
    WHEN=60
    EXCEPTION=61
    OF=62
    DOT=63
    DOTDOT=64
    EXCLAMATION_MARK=65
    COMMA=66
    SEMICOLON=67
    COLON=68
    ASSIGN=69
    PIPE=70
    MISSING_ARG=71
    RIGHT_ARROW=72
    COMPOS=73
    ADD=74
    MINUS=75
    MUL=76
    DIV=77
    POW=78
    MOD=79
    EQUAL=80
    NOT_EQUAL=81
    LESS=82
    GREATER=83
    LESS_EQUAL=84
    GREATER_EQUAL=85
    AND=86
    OR=87
    LSHIFT=88
    RSHIFT=89
    LOG_MUL=90
    LOG_ADD=91
    LOG_XOR=92
    LOG_NOT=93
    NOT=94
    COLON_Q=95
    OPEN_PAREN=96
    CLOSE_PAREN=97
    OPEN_BRACE=98
    CLOSE_BRACE=99
    OPEN_BRACKET=100
    CLOSE_BRACKET=101
    DOUBLE_QUOTES=102
    IF=103
    ELIF=104
    ELSE=105
    VERTICAL_LINE=106
    IDENTIFIER=107
    SINGLE_CHARACTER=108

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class DotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(FSharpParser.DOT, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_dot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot" ):
                listener.enterDot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot" ):
                listener.exitDot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDot" ):
                return visitor.visitDot(self)
            else:
                return visitor.visitChildren(self)




    def dot(self):

        localctx = FSharpParser.DotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_dot)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 202
            self.match(FSharpParser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(FSharpParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = FSharpParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self.match(FSharpParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotIentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(FSharpParser.IdentifierContext,i)


        def dot(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.DotContext)
            else:
                return self.getTypedRuleContext(FSharpParser.DotContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_dotIentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotIentifier" ):
                listener.enterDotIentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotIentifier" ):
                listener.exitDotIentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotIentifier" ):
                return visitor.visitDotIentifier(self)
            else:
                return visitor.visitChildren(self)




    def dotIentifier(self):

        localctx = FSharpParser.DotIentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dotIentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 206
            self.identifier()
            self.state = 212
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 207
                    self.dot()
                    self.state = 208
                    self.identifier() 
                self.state = 214
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(FSharpParser.INT, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_int

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInt" ):
                listener.enterInt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInt" ):
                listener.exitInt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInt" ):
                return visitor.visitInt(self)
            else:
                return visitor.visitChildren(self)




    def int_(self):

        localctx = FSharpParser.IntContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_int)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 215
            self.match(FSharpParser.INT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT(self):
            return self.getToken(FSharpParser.FLOAT, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_float

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloat" ):
                listener.enterFloat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloat" ):
                listener.exitFloat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloat" ):
                return visitor.visitFloat(self)
            else:
                return visitor.visitChildren(self)




    def float_(self):

        localctx = FSharpParser.FloatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_float)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 217
            self.match(FSharpParser.FLOAT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNIT(self):
            return self.getToken(FSharpParser.UNIT, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_unit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit" ):
                listener.enterUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit" ):
                listener.exitUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit" ):
                return visitor.visitUnit(self)
            else:
                return visitor.visitChildren(self)




    def unit(self):

        localctx = FSharpParser.UnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_unit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 219
            self.match(FSharpParser.UNIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOL(self):
            return self.getToken(FSharpParser.BOOL, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_bool

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool" ):
                listener.enterBool(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool" ):
                listener.exitBool(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBool" ):
                return visitor.visitBool(self)
            else:
                return visitor.visitChildren(self)




    def bool_(self):

        localctx = FSharpParser.BoolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_bool)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 221
            self.match(FSharpParser.BOOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR(self):
            return self.getToken(FSharpParser.CHAR, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_char

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar" ):
                listener.enterChar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar" ):
                listener.exitChar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChar" ):
                return visitor.visitChar(self)
            else:
                return visitor.visitChildren(self)




    def char(self):

        localctx = FSharpParser.CharContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_char)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 223
            self.match(FSharpParser.CHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnderscoreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MISSING_ARG(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.MISSING_ARG)
            else:
                return self.getToken(FSharpParser.MISSING_ARG, i)

        def getRuleIndex(self):
            return FSharpParser.RULE_underscore

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnderscore" ):
                listener.enterUnderscore(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnderscore" ):
                listener.exitUnderscore(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnderscore" ):
                return visitor.visitUnderscore(self)
            else:
                return visitor.visitChildren(self)




    def underscore(self):

        localctx = FSharpParser.UnderscoreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_underscore)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self.match(FSharpParser.MISSING_ARG)
            self.state = 227
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 226
                self.match(FSharpParser.MISSING_ARG)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterpolationSignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERPOLATIONSIGN(self):
            return self.getToken(FSharpParser.INTERPOLATIONSIGN, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_interpolationSign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolationSign" ):
                listener.enterInterpolationSign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolationSign" ):
                listener.exitInterpolationSign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterpolationSign" ):
                return visitor.visitInterpolationSign(self)
            else:
                return visitor.visitChildren(self)




    def interpolationSign(self):

        localctx = FSharpParser.InterpolationSignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_interpolationSign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229
            self.match(FSharpParser.INTERPOLATIONSIGN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DollarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOLLAR(self):
            return self.getToken(FSharpParser.DOLLAR, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_dollar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDollar" ):
                listener.enterDollar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDollar" ):
                listener.exitDollar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDollar" ):
                return visitor.visitDollar(self)
            else:
                return visitor.visitChildren(self)




    def dollar(self):

        localctx = FSharpParser.DollarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_dollar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 231
            self.match(FSharpParser.DOLLAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(FSharpParser.STRING, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = FSharpParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            self.match(FSharpParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERPOLATED_STRING(self):
            return self.getToken(FSharpParser.INTERPOLATED_STRING, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_interpolated_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_string" ):
                listener.enterInterpolated_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_string" ):
                listener.exitInterpolated_string(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterpolated_string" ):
                return visitor.visitInterpolated_string(self)
            else:
                return visitor.visitChildren(self)




    def interpolated_string(self):

        localctx = FSharpParser.Interpolated_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_interpolated_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            self.match(FSharpParser.INTERPOLATED_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(FSharpParser.OPEN_BRACKET, 0)

        def LESS(self):
            return self.getToken(FSharpParser.LESS, 0)

        def dotIentifier(self):
            return self.getTypedRuleContext(FSharpParser.DotIentifierContext,0)


        def GREATER(self):
            return self.getToken(FSharpParser.GREATER, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(FSharpParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = FSharpParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self.match(FSharpParser.OPEN_BRACKET)
            self.state = 238
            self.match(FSharpParser.LESS)
            self.state = 239
            self.dotIentifier()
            self.state = 240
            self.match(FSharpParser.GREATER)
            self.state = 241
            self.match(FSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS(self):
            return self.getToken(FSharpParser.LESS, 0)

        def dotIentifier(self):
            return self.getTypedRuleContext(FSharpParser.DotIentifierContext,0)


        def GREATER(self):
            return self.getToken(FSharpParser.GREATER, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_generic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric" ):
                listener.enterGeneric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric" ):
                listener.exitGeneric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneric" ):
                return visitor.visitGeneric(self)
            else:
                return visitor.visitChildren(self)




    def generic(self):

        localctx = FSharpParser.GenericContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_generic)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            self.match(FSharpParser.LESS)
            self.state = 244
            self.dotIentifier()
            self.state = 245
            self.match(FSharpParser.GREATER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Round_bracketsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FSharpParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FSharpParser.CLOSE_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.COMMA)
            else:
                return self.getToken(FSharpParser.COMMA, i)

        def getRuleIndex(self):
            return FSharpParser.RULE_round_brackets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRound_brackets" ):
                listener.enterRound_brackets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRound_brackets" ):
                listener.exitRound_brackets(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRound_brackets" ):
                return visitor.visitRound_brackets(self)
            else:
                return visitor.visitChildren(self)




    def round_brackets(self):

        localctx = FSharpParser.Round_bracketsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_round_brackets)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 247
            self.match(FSharpParser.OPEN_PAREN)
            self.state = 256 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 249 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 248
                        self.expression()

                    else:
                        raise NoViableAltException(self)
                    self.state = 251 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==66:
                    self.state = 253
                    self.match(FSharpParser.COMMA)


                self.state = 258 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -4648022701282164776) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 6919192313721) != 0)):
                    break

            self.state = 260
            self.match(FSharpParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REC(self):
            return self.getToken(FSharpParser.REC, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_rec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRec" ):
                listener.enterRec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRec" ):
                listener.exitRec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRec" ):
                return visitor.visitRec(self)
            else:
                return visitor.visitChildren(self)




    def rec(self):

        localctx = FSharpParser.RecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_rec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self.match(FSharpParser.REC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PublicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(FSharpParser.PUBLIC, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_public

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublic" ):
                listener.enterPublic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublic" ):
                listener.exitPublic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPublic" ):
                return visitor.visitPublic(self)
            else:
                return visitor.visitChildren(self)




    def public(self):

        localctx = FSharpParser.PublicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_public)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self.match(FSharpParser.PUBLIC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(FSharpParser.PRIVATE, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_private

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivate" ):
                listener.enterPrivate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivate" ):
                listener.exitPrivate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivate" ):
                return visitor.visitPrivate(self)
            else:
                return visitor.visitChildren(self)




    def private(self):

        localctx = FSharpParser.PrivateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_private)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 266
            self.match(FSharpParser.PRIVATE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InternalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERNAL(self):
            return self.getToken(FSharpParser.INTERNAL, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_internal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInternal" ):
                listener.enterInternal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInternal" ):
                listener.exitInternal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInternal" ):
                return visitor.visitInternal(self)
            else:
                return visitor.visitChildren(self)




    def internal(self):

        localctx = FSharpParser.InternalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_internal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 268
            self.match(FSharpParser.INTERNAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MutableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MUTABLE(self):
            return self.getToken(FSharpParser.MUTABLE, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_mutable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutable" ):
                listener.enterMutable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutable" ):
                listener.exitMutable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMutable" ):
                return visitor.visitMutable(self)
            else:
                return visitor.visitChildren(self)




    def mutable(self):

        localctx = FSharpParser.MutableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_mutable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 270
            self.match(FSharpParser.MUTABLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Let_funContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(FSharpParser.LET, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(FSharpParser.IdentifierContext,i)


        def equal(self):
            return self.getTypedRuleContext(FSharpParser.EqualContext,0)


        def expression(self):
            return self.getTypedRuleContext(FSharpParser.ExpressionContext,0)


        def mutable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.MutableContext)
            else:
                return self.getTypedRuleContext(FSharpParser.MutableContext,i)


        def internal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.InternalContext)
            else:
                return self.getTypedRuleContext(FSharpParser.InternalContext,i)


        def rec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.RecContext)
            else:
                return self.getTypedRuleContext(FSharpParser.RecContext,i)


        def public(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.PublicContext)
            else:
                return self.getTypedRuleContext(FSharpParser.PublicContext,i)


        def private(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.PrivateContext)
            else:
                return self.getTypedRuleContext(FSharpParser.PrivateContext,i)


        def unit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.UnitContext)
            else:
                return self.getTypedRuleContext(FSharpParser.UnitContext,i)


        def round_brackets(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.Round_bracketsContext)
            else:
                return self.getTypedRuleContext(FSharpParser.Round_bracketsContext,i)


        def typezation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.TypezationContext)
            else:
                return self.getTypedRuleContext(FSharpParser.TypezationContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_let_fun

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLet_fun" ):
                listener.enterLet_fun(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLet_fun" ):
                listener.exitLet_fun(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLet_fun" ):
                return visitor.visitLet_fun(self)
            else:
                return visitor.visitChildren(self)




    def let_fun(self):

        localctx = FSharpParser.Let_funContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_let_fun)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self.match(FSharpParser.LET)
            self.state = 280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 63488) != 0):
                self.state = 278
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [15]:
                    self.state = 273
                    self.mutable()
                    pass
                elif token in [14]:
                    self.state = 274
                    self.internal()
                    pass
                elif token in [11]:
                    self.state = 275
                    self.rec()
                    pass
                elif token in [12]:
                    self.state = 276
                    self.public()
                    pass
                elif token in [13]:
                    self.state = 277
                    self.private()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 282
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 283
            self.identifier()
            self.state = 291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 63488) != 0):
                self.state = 289
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [15]:
                    self.state = 284
                    self.mutable()
                    pass
                elif token in [14]:
                    self.state = 285
                    self.internal()
                    pass
                elif token in [11]:
                    self.state = 286
                    self.rec()
                    pass
                elif token in [12]:
                    self.state = 287
                    self.public()
                    pass
                elif token in [13]:
                    self.state = 288
                    self.private()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 300 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 300
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [107]:
                    self.state = 294
                    self.identifier()
                    self.state = 296
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                    if la_ == 1:
                        self.state = 295
                        self.typezation()


                    pass
                elif token in [10]:
                    self.state = 298
                    self.unit()
                    pass
                elif token in [96]:
                    self.state = 299
                    self.round_brackets()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 302 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==10 or _la==96 or _la==107):
                    break

            self.state = 305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 304
                self.typezation()


            self.state = 307
            self.equal()
            self.state = 308
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Let_varContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(FSharpParser.LET, 0)

        def identifier(self):
            return self.getTypedRuleContext(FSharpParser.IdentifierContext,0)


        def mutable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.MutableContext)
            else:
                return self.getTypedRuleContext(FSharpParser.MutableContext,i)


        def internal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.InternalContext)
            else:
                return self.getTypedRuleContext(FSharpParser.InternalContext,i)


        def rec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.RecContext)
            else:
                return self.getTypedRuleContext(FSharpParser.RecContext,i)


        def public(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.PublicContext)
            else:
                return self.getTypedRuleContext(FSharpParser.PublicContext,i)


        def private(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.PrivateContext)
            else:
                return self.getTypedRuleContext(FSharpParser.PrivateContext,i)


        def typezation(self):
            return self.getTypedRuleContext(FSharpParser.TypezationContext,0)


        def equal(self):
            return self.getTypedRuleContext(FSharpParser.EqualContext,0)


        def expression(self):
            return self.getTypedRuleContext(FSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return FSharpParser.RULE_let_var

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLet_var" ):
                listener.enterLet_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLet_var" ):
                listener.exitLet_var(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLet_var" ):
                return visitor.visitLet_var(self)
            else:
                return visitor.visitChildren(self)




    def let_var(self):

        localctx = FSharpParser.Let_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_let_var)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 310
            self.match(FSharpParser.LET)
            self.state = 318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 63488) != 0):
                self.state = 316
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [15]:
                    self.state = 311
                    self.mutable()
                    pass
                elif token in [14]:
                    self.state = 312
                    self.internal()
                    pass
                elif token in [11]:
                    self.state = 313
                    self.rec()
                    pass
                elif token in [12]:
                    self.state = 314
                    self.public()
                    pass
                elif token in [13]:
                    self.state = 315
                    self.private()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 320
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 321
            self.identifier()
            self.state = 323
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 322
                self.typezation()


            self.state = 328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 325
                self.equal()
                self.state = 326
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUN(self):
            return self.getToken(FSharpParser.FUN, 0)

        def RIGHT_ARROW(self):
            return self.getToken(FSharpParser.RIGHT_ARROW, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_fun

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFun" ):
                listener.enterFun(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFun" ):
                listener.exitFun(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFun" ):
                return visitor.visitFun(self)
            else:
                return visitor.visitChildren(self)




    def fun(self):

        localctx = FSharpParser.FunContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_fun)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.match(FSharpParser.FUN)
            self.state = 332 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 331
                self.expression()
                self.state = 334 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -4648022701282164776) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 6919192313721) != 0)):
                    break

            self.state = 336
            self.match(FSharpParser.RIGHT_ARROW)
            self.state = 337
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fun_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotIentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.DotIentifierContext)
            else:
                return self.getTypedRuleContext(FSharpParser.DotIentifierContext,i)


        def RIGHT_ARROW(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.RIGHT_ARROW)
            else:
                return self.getToken(FSharpParser.RIGHT_ARROW, i)

        def getRuleIndex(self):
            return FSharpParser.RULE_fun_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFun_type" ):
                listener.enterFun_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFun_type" ):
                listener.exitFun_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFun_type" ):
                return visitor.visitFun_type(self)
            else:
                return visitor.visitChildren(self)




    def fun_type(self):

        localctx = FSharpParser.Fun_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_fun_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self.dotIentifier()
            self.state = 342 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 340
                    self.match(FSharpParser.RIGHT_ARROW)
                    self.state = 341
                    self.dotIentifier()

                else:
                    raise NoViableAltException(self)
                self.state = 344 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypezationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(FSharpParser.COLON, 0)

        def round_brackets(self):
            return self.getTypedRuleContext(FSharpParser.Round_bracketsContext,0)


        def dotIentifier(self):
            return self.getTypedRuleContext(FSharpParser.DotIentifierContext,0)


        def getRuleIndex(self):
            return FSharpParser.RULE_typezation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypezation" ):
                listener.enterTypezation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypezation" ):
                listener.exitTypezation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypezation" ):
                return visitor.visitTypezation(self)
            else:
                return visitor.visitChildren(self)




    def typezation(self):

        localctx = FSharpParser.TypezationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_typezation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self.match(FSharpParser.COLON)
            self.state = 349
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [96]:
                self.state = 347
                self.round_brackets()
                pass
            elif token in [107]:
                self.state = 348
                self.dotIentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_then_elif_elseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(FSharpParser.IF, 0)

        def THEN(self):
            return self.getToken(FSharpParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def cond_ops(self):
            return self.getTypedRuleContext(FSharpParser.Cond_opsContext,0)


        def elif_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.Elif_expressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.Elif_expressionContext,i)


        def else_expression(self):
            return self.getTypedRuleContext(FSharpParser.Else_expressionContext,0)


        def getRuleIndex(self):
            return FSharpParser.RULE_if_then_elif_else

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_then_elif_else" ):
                listener.enterIf_then_elif_else(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_then_elif_else" ):
                listener.exitIf_then_elif_else(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_then_elif_else" ):
                return visitor.visitIf_then_elif_else(self)
            else:
                return visitor.visitChildren(self)




    def if_then_elif_else(self):

        localctx = FSharpParser.If_then_elif_elseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_if_then_elif_else)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self.match(FSharpParser.IF)
            self.state = 353 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 352
                self.expression()
                self.state = 355 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -4648022701282164776) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 6919192313721) != 0)):
                    break

            self.state = 357
            self.match(FSharpParser.THEN)
            self.state = 359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 358
                self.cond_ops()


            self.state = 362 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 361
                    self.expression()

                else:
                    raise NoViableAltException(self)
                self.state = 364 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

            self.state = 369
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 366
                    self.elif_expression() 
                self.state = 371
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

            self.state = 373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 372
                self.else_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(FSharpParser.ELSE, 0)

        def cond_ops(self):
            return self.getTypedRuleContext(FSharpParser.Cond_opsContext,0)


        def getRuleIndex(self):
            return FSharpParser.RULE_else_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_expression" ):
                listener.enterElse_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_expression" ):
                listener.exitElse_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_expression" ):
                return visitor.visitElse_expression(self)
            else:
                return visitor.visitChildren(self)




    def else_expression(self):

        localctx = FSharpParser.Else_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_else_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self.match(FSharpParser.ELSE)
            self.state = 377
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 376
                self.cond_ops()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elif_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(FSharpParser.ELIF, 0)

        def THEN(self):
            return self.getToken(FSharpParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def cond_ops(self):
            return self.getTypedRuleContext(FSharpParser.Cond_opsContext,0)


        def getRuleIndex(self):
            return FSharpParser.RULE_elif_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElif_expression" ):
                listener.enterElif_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElif_expression" ):
                listener.exitElif_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElif_expression" ):
                return visitor.visitElif_expression(self)
            else:
                return visitor.visitChildren(self)




    def elif_expression(self):

        localctx = FSharpParser.Elif_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_elif_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.match(FSharpParser.ELIF)
            self.state = 381 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 380
                self.expression()
                self.state = 383 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -4648022701282164776) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 6919192313721) != 0)):
                    break

            self.state = 385
            self.match(FSharpParser.THEN)
            self.state = 387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 386
                self.cond_ops()


            self.state = 390 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 389
                    self.expression()

                else:
                    raise NoViableAltException(self)
                self.state = 392 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_doContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(FSharpParser.WHILE, 0)

        def DO(self):
            return self.getToken(FSharpParser.DO, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def cond_ops(self):
            return self.getTypedRuleContext(FSharpParser.Cond_opsContext,0)


        def getRuleIndex(self):
            return FSharpParser.RULE_while_do

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_do" ):
                listener.enterWhile_do(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_do" ):
                listener.exitWhile_do(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_do" ):
                return visitor.visitWhile_do(self)
            else:
                return visitor.visitChildren(self)




    def while_do(self):

        localctx = FSharpParser.While_doContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_while_do)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self.match(FSharpParser.WHILE)
            self.state = 396 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 395
                    self.expression()

                else:
                    raise NoViableAltException(self)
                self.state = 398 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

            self.state = 400
            self.match(FSharpParser.DO)
            self.state = 402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 401
                self.cond_ops()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(FSharpParser.FOR, 0)

        def DO(self):
            return self.getToken(FSharpParser.DO, 0)

        def TO(self):
            return self.getToken(FSharpParser.TO, 0)

        def DOWNTO(self):
            return self.getToken(FSharpParser.DOWNTO, 0)

        def IN(self):
            return self.getToken(FSharpParser.IN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def cond_ops(self):
            return self.getTypedRuleContext(FSharpParser.Cond_opsContext,0)


        def getRuleIndex(self):
            return FSharpParser.RULE_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor" ):
                listener.enterFor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor" ):
                listener.exitFor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor" ):
                return visitor.visitFor(self)
            else:
                return visitor.visitChildren(self)




    def for_(self):

        localctx = FSharpParser.ForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self.match(FSharpParser.FOR)
            self.state = 406 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 405
                self.expression()
                self.state = 408 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -4648022701282164776) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 6919192313721) != 0)):
                    break

            self.state = 410
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 14680064) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 412 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 411
                    self.expression()

                else:
                    raise NoViableAltException(self)
                self.state = 414 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

            self.state = 416
            self.match(FSharpParser.DO)
            self.state = 418
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 417
                self.cond_ops()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(FSharpParser.ADD, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_add

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd" ):
                listener.enterAdd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd" ):
                listener.exitAdd(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdd" ):
                return visitor.visitAdd(self)
            else:
                return visitor.visitChildren(self)




    def add(self):

        localctx = FSharpParser.AddContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_add)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 420
            self.match(FSharpParser.ADD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MulContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MUL(self):
            return self.getToken(FSharpParser.MUL, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_mul

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMul" ):
                listener.enterMul(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMul" ):
                listener.exitMul(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMul" ):
                return visitor.visitMul(self)
            else:
                return visitor.visitChildren(self)




    def mul(self):

        localctx = FSharpParser.MulContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_mul)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.match(FSharpParser.MUL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DivContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIV(self):
            return self.getToken(FSharpParser.DIV, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_div

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiv" ):
                listener.enterDiv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiv" ):
                listener.exitDiv(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiv" ):
                return visitor.visitDiv(self)
            else:
                return visitor.visitChildren(self)




    def div(self):

        localctx = FSharpParser.DivContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_div)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.match(FSharpParser.DIV)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinusContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(FSharpParser.MINUS, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_minus

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinus" ):
                listener.enterMinus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinus" ):
                listener.exitMinus(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinus" ):
                return visitor.visitMinus(self)
            else:
                return visitor.visitChildren(self)




    def minus(self):

        localctx = FSharpParser.MinusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_minus)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.match(FSharpParser.MINUS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POW(self):
            return self.getToken(FSharpParser.POW, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_pow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPow" ):
                listener.enterPow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPow" ):
                listener.exitPow(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPow" ):
                return visitor.visitPow(self)
            else:
                return visitor.visitChildren(self)




    def pow_(self):

        localctx = FSharpParser.PowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_pow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self.match(FSharpParser.POW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MOD(self):
            return self.getToken(FSharpParser.MOD, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_mod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMod" ):
                listener.enterMod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMod" ):
                listener.exitMod(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMod" ):
                return visitor.visitMod(self)
            else:
                return visitor.visitChildren(self)




    def mod(self):

        localctx = FSharpParser.ModContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_mod)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            self.match(FSharpParser.MOD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not_equalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT_EQUAL(self):
            return self.getToken(FSharpParser.NOT_EQUAL, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_not_equal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_equal" ):
                listener.enterNot_equal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_equal" ):
                listener.exitNot_equal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_equal" ):
                return visitor.visitNot_equal(self)
            else:
                return visitor.visitChildren(self)




    def not_equal(self):

        localctx = FSharpParser.Not_equalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_not_equal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self.match(FSharpParser.NOT_EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS(self):
            return self.getToken(FSharpParser.LESS, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_less

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLess" ):
                listener.enterLess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLess" ):
                listener.exitLess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLess" ):
                return visitor.visitLess(self)
            else:
                return visitor.visitChildren(self)




    def less(self):

        localctx = FSharpParser.LessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_less)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 434
            self.match(FSharpParser.LESS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Less_equalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_EQUAL(self):
            return self.getToken(FSharpParser.LESS_EQUAL, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_less_equal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLess_equal" ):
                listener.enterLess_equal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLess_equal" ):
                listener.exitLess_equal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLess_equal" ):
                return visitor.visitLess_equal(self)
            else:
                return visitor.visitChildren(self)




    def less_equal(self):

        localctx = FSharpParser.Less_equalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_less_equal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self.match(FSharpParser.LESS_EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GreaterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER(self):
            return self.getToken(FSharpParser.GREATER, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_greater

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGreater" ):
                listener.enterGreater(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGreater" ):
                listener.exitGreater(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGreater" ):
                return visitor.visitGreater(self)
            else:
                return visitor.visitChildren(self)




    def greater(self):

        localctx = FSharpParser.GreaterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_greater)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.match(FSharpParser.GREATER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Greater_equalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER_EQUAL(self):
            return self.getToken(FSharpParser.GREATER_EQUAL, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_greater_equal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGreater_equal" ):
                listener.enterGreater_equal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGreater_equal" ):
                listener.exitGreater_equal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGreater_equal" ):
                return visitor.visitGreater_equal(self)
            else:
                return visitor.visitChildren(self)




    def greater_equal(self):

        localctx = FSharpParser.Greater_equalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_greater_equal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self.match(FSharpParser.GREATER_EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(FSharpParser.EQUAL, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_equal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqual" ):
                listener.enterEqual(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqual" ):
                listener.exitEqual(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqual" ):
                return visitor.visitEqual(self)
            else:
                return visitor.visitChildren(self)




    def equal(self):

        localctx = FSharpParser.EqualContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_equal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.match(FSharpParser.EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(FSharpParser.AND, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_and

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd" ):
                listener.enterAnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd" ):
                listener.exitAnd(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd" ):
                return visitor.visitAnd(self)
            else:
                return visitor.visitChildren(self)




    def and_(self):

        localctx = FSharpParser.AndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_and)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self.match(FSharpParser.AND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(FSharpParser.OR, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr" ):
                listener.enterOr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr" ):
                listener.exitOr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr" ):
                return visitor.visitOr(self)
            else:
                return visitor.visitChildren(self)




    def or_(self):

        localctx = FSharpParser.OrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.match(FSharpParser.OR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LshiftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSHIFT(self):
            return self.getToken(FSharpParser.LSHIFT, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_lshift

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLshift" ):
                listener.enterLshift(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLshift" ):
                listener.exitLshift(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLshift" ):
                return visitor.visitLshift(self)
            else:
                return visitor.visitChildren(self)




    def lshift(self):

        localctx = FSharpParser.LshiftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_lshift)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 448
            self.match(FSharpParser.LSHIFT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RshiftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RSHIFT(self):
            return self.getToken(FSharpParser.RSHIFT, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_rshift

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRshift" ):
                listener.enterRshift(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRshift" ):
                listener.exitRshift(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRshift" ):
                return visitor.visitRshift(self)
            else:
                return visitor.visitChildren(self)




    def rshift(self):

        localctx = FSharpParser.RshiftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_rshift)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.match(FSharpParser.RSHIFT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Log_mulContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG_MUL(self):
            return self.getToken(FSharpParser.LOG_MUL, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_log_mul

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLog_mul" ):
                listener.enterLog_mul(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLog_mul" ):
                listener.exitLog_mul(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLog_mul" ):
                return visitor.visitLog_mul(self)
            else:
                return visitor.visitChildren(self)




    def log_mul(self):

        localctx = FSharpParser.Log_mulContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_log_mul)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self.match(FSharpParser.LOG_MUL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Log_addContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG_ADD(self):
            return self.getToken(FSharpParser.LOG_ADD, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_log_add

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLog_add" ):
                listener.enterLog_add(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLog_add" ):
                listener.exitLog_add(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLog_add" ):
                return visitor.visitLog_add(self)
            else:
                return visitor.visitChildren(self)




    def log_add(self):

        localctx = FSharpParser.Log_addContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_log_add)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.match(FSharpParser.LOG_ADD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Log_xorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG_XOR(self):
            return self.getToken(FSharpParser.LOG_XOR, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_log_xor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLog_xor" ):
                listener.enterLog_xor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLog_xor" ):
                listener.exitLog_xor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLog_xor" ):
                return visitor.visitLog_xor(self)
            else:
                return visitor.visitChildren(self)




    def log_xor(self):

        localctx = FSharpParser.Log_xorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_log_xor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self.match(FSharpParser.LOG_XOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Log_notContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG_NOT(self):
            return self.getToken(FSharpParser.LOG_NOT, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_log_not

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLog_not" ):
                listener.enterLog_not(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLog_not" ):
                listener.exitLog_not(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLog_not" ):
                return visitor.visitLog_not(self)
            else:
                return visitor.visitChildren(self)




    def log_not(self):

        localctx = FSharpParser.Log_notContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_log_not)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.match(FSharpParser.LOG_NOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(FSharpParser.NOT, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_not

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot" ):
                listener.enterNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot" ):
                listener.exitNot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot" ):
                return visitor.visitNot(self)
            else:
                return visitor.visitChildren(self)




    def not_(self):

        localctx = FSharpParser.NotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_not)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self.match(FSharpParser.NOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PipeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PIPE(self):
            return self.getToken(FSharpParser.PIPE, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_pipe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPipe" ):
                listener.enterPipe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPipe" ):
                listener.exitPipe(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPipe" ):
                return visitor.visitPipe(self)
            else:
                return visitor.visitChildren(self)




    def pipe(self):

        localctx = FSharpParser.PipeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_pipe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(FSharpParser.PIPE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComposContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPOS(self):
            return self.getToken(FSharpParser.COMPOS, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_compos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompos" ):
                listener.enterCompos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompos" ):
                listener.exitCompos(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompos" ):
                return visitor.visitCompos(self)
            else:
                return visitor.visitChildren(self)




    def compos(self):

        localctx = FSharpParser.ComposContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_compos)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464
            self.match(FSharpParser.COMPOS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(FSharpParser.ASSIGN, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign" ):
                listener.enterAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign" ):
                listener.exitAssign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign" ):
                return visitor.visitAssign(self)
            else:
                return visitor.visitChildren(self)




    def assign(self):

        localctx = FSharpParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.match(FSharpParser.ASSIGN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(FSharpParser.TYPE, 0)

        def EQUAL(self):
            return self.getToken(FSharpParser.EQUAL, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType" ):
                return visitor.visitType(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = FSharpParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.match(FSharpParser.TYPE)
            self.state = 470 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 469
                    self.expression()

                else:
                    raise NoViableAltException(self)
                self.state = 472 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

            self.state = 474
            self.match(FSharpParser.EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODULE(self):
            return self.getToken(FSharpParser.MODULE, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModule" ):
                return visitor.visitModule(self)
            else:
                return visitor.visitChildren(self)




    def module(self):

        localctx = FSharpParser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_module)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self.match(FSharpParser.MODULE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(FSharpParser.OPEN, 0)

        def dotIentifier(self):
            return self.getTypedRuleContext(FSharpParser.DotIentifierContext,0)


        def getRuleIndex(self):
            return FSharpParser.RULE_open

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen" ):
                listener.enterOpen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen" ):
                listener.exitOpen(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpen" ):
                return visitor.visitOpen(self)
            else:
                return visitor.visitChildren(self)




    def open_(self):

        localctx = FSharpParser.OpenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_open)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.match(FSharpParser.OPEN)
            self.state = 479
            self.dotIentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAMESPACE(self):
            return self.getToken(FSharpParser.NAMESPACE, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace" ):
                listener.enterNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace" ):
                listener.exitNamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespace" ):
                return visitor.visitNamespace(self)
            else:
                return visitor.visitChildren(self)




    def namespace(self):

        localctx = FSharpParser.NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481
            self.match(FSharpParser.NAMESPACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(FSharpParser.CLASS, 0)

        def END(self):
            return self.getToken(FSharpParser.END, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_class

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass" ):
                listener.enterClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass" ):
                listener.exitClass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass" ):
                return visitor.visitClass(self)
            else:
                return visitor.visitChildren(self)




    def class_(self):

        localctx = FSharpParser.ClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_class)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self.match(FSharpParser.CLASS)
            self.state = 485 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 484
                self.expression()
                self.state = 487 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -4648022701282164776) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 6919192313721) != 0)):
                    break

            self.state = 489
            self.match(FSharpParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(FSharpParser.DO, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_do

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDo" ):
                listener.enterDo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDo" ):
                listener.exitDo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDo" ):
                return visitor.visitDo(self)
            else:
                return visitor.visitChildren(self)




    def do(self):

        localctx = FSharpParser.DoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_do)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self.match(FSharpParser.DO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(FSharpParser.NEW, 0)

        def expression(self):
            return self.getTypedRuleContext(FSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return FSharpParser.RULE_new

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNew" ):
                listener.enterNew(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNew" ):
                listener.exitNew(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNew" ):
                return visitor.visitNew(self)
            else:
                return visitor.visitChildren(self)




    def new(self):

        localctx = FSharpParser.NewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_new)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self.match(FSharpParser.NEW)
            self.state = 494
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(FSharpParser.WHEN, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_when

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen" ):
                listener.enterWhen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen" ):
                listener.exitWhen(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhen" ):
                return visitor.visitWhen(self)
            else:
                return visitor.visitChildren(self)




    def when(self):

        localctx = FSharpParser.WhenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_when)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.match(FSharpParser.WHEN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEQ(self):
            return self.getToken(FSharpParser.SEQ, 0)

        def OPEN_BRACE(self):
            return self.getToken(FSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FSharpParser.CLOSE_BRACE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.SEMICOLON)
            else:
                return self.getToken(FSharpParser.SEMICOLON, i)

        def getRuleIndex(self):
            return FSharpParser.RULE_seq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeq" ):
                listener.enterSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeq" ):
                listener.exitSeq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSeq" ):
                return visitor.visitSeq(self)
            else:
                return visitor.visitChildren(self)




    def seq(self):

        localctx = FSharpParser.SeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_seq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self.match(FSharpParser.SEQ)
            self.state = 499
            self.match(FSharpParser.OPEN_BRACE)
            self.state = 501 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 500
                    self.expression()

                else:
                    raise NoViableAltException(self)
                self.state = 503 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

            self.state = 515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4648022701282164776) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 6919192313725) != 0):
                self.state = 506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67:
                    self.state = 505
                    self.match(FSharpParser.SEMICOLON)


                self.state = 509 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 508
                        self.expression()

                    else:
                        raise NoViableAltException(self)
                    self.state = 511 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

                self.state = 517
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 518
            self.match(FSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(FSharpParser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(FSharpParser.CLOSE_BRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.SEMICOLON)
            else:
                return self.getToken(FSharpParser.SEMICOLON, i)

        def getRuleIndex(self):
            return FSharpParser.RULE_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList" ):
                listener.enterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList" ):
                listener.exitList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList" ):
                return visitor.visitList(self)
            else:
                return visitor.visitChildren(self)




    def list_(self):

        localctx = FSharpParser.ListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.match(FSharpParser.OPEN_BRACKET)
            self.state = 522 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 521
                    self.expression()

                else:
                    raise NoViableAltException(self)
                self.state = 524 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4648022701282164776) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 6919192313725) != 0):
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67:
                    self.state = 526
                    self.match(FSharpParser.SEMICOLON)


                self.state = 530 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 529
                        self.expression()

                    else:
                        raise NoViableAltException(self)
                    self.state = 532 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

                self.state = 538
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 539
            self.match(FSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(FSharpParser.OPEN_BRACKET, 0)

        def VERTICAL_LINE(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.VERTICAL_LINE)
            else:
                return self.getToken(FSharpParser.VERTICAL_LINE, i)

        def CLOSE_BRACKET(self):
            return self.getToken(FSharpParser.CLOSE_BRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.SEMICOLON)
            else:
                return self.getToken(FSharpParser.SEMICOLON, i)

        def getRuleIndex(self):
            return FSharpParser.RULE_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray" ):
                listener.enterArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray" ):
                listener.exitArray(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray" ):
                return visitor.visitArray(self)
            else:
                return visitor.visitChildren(self)




    def array(self):

        localctx = FSharpParser.ArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_array)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.match(FSharpParser.OPEN_BRACKET)
            self.state = 542
            self.match(FSharpParser.VERTICAL_LINE)
            self.state = 544 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 543
                    self.expression()

                else:
                    raise NoViableAltException(self)
                self.state = 546 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

            self.state = 558
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 549
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==67:
                        self.state = 548
                        self.match(FSharpParser.SEMICOLON)


                    self.state = 552 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 551
                            self.expression()

                        else:
                            raise NoViableAltException(self)
                        self.state = 554 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
             
                self.state = 560
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

            self.state = 561
            self.match(FSharpParser.VERTICAL_LINE)
            self.state = 562
            self.match(FSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAP(self):
            return self.getToken(FSharpParser.MAP, 0)

        def OPEN_BRACKET(self):
            return self.getToken(FSharpParser.OPEN_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.COMMA)
            else:
                return self.getToken(FSharpParser.COMMA, i)

        def CLOSE_BRACKET(self):
            return self.getToken(FSharpParser.CLOSE_BRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.SEMICOLON)
            else:
                return self.getToken(FSharpParser.SEMICOLON, i)

        def getRuleIndex(self):
            return FSharpParser.RULE_map

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap" ):
                listener.enterMap(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap" ):
                listener.exitMap(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMap" ):
                return visitor.visitMap(self)
            else:
                return visitor.visitChildren(self)




    def map_(self):

        localctx = FSharpParser.MapContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_map)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.match(FSharpParser.MAP)
            self.state = 565
            self.match(FSharpParser.OPEN_BRACKET)
            self.state = 567 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 566
                self.expression()
                self.state = 569 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -4648022701282164776) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 6919192313721) != 0)):
                    break

            self.state = 571
            self.match(FSharpParser.COMMA)
            self.state = 573 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 572
                    self.expression()

                else:
                    raise NoViableAltException(self)
                self.state = 575 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

            self.state = 593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4648022701282164776) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 6919192313725) != 0):
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67:
                    self.state = 577
                    self.match(FSharpParser.SEMICOLON)


                self.state = 581 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 580
                    self.expression()
                    self.state = 583 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -4648022701282164776) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 6919192313721) != 0)):
                        break

                self.state = 585
                self.match(FSharpParser.COMMA)
                self.state = 587 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 586
                        self.expression()

                    else:
                        raise NoViableAltException(self)
                    self.state = 589 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

                self.state = 595
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 596
            self.match(FSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeneratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOTDOT(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.DOTDOT)
            else:
                return self.getToken(FSharpParser.DOTDOT, i)

        def INT(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.INT)
            else:
                return self.getToken(FSharpParser.INT, i)

        def FLOAT(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.FLOAT)
            else:
                return self.getToken(FSharpParser.FLOAT, i)

        def getRuleIndex(self):
            return FSharpParser.RULE_generator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenerator" ):
                listener.enterGenerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenerator" ):
                listener.exitGenerator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenerator" ):
                return visitor.visitGenerator(self)
            else:
                return visitor.visitChildren(self)




    def generator(self):

        localctx = FSharpParser.GeneratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_generator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            _la = self._input.LA(1)
            if not(_la==3 or _la==4):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 599
            self.match(FSharpParser.DOTDOT)
            self.state = 600
            _la = self._input.LA(1)
            if not(_la==3 or _la==4):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 601
                self.match(FSharpParser.DOTDOT)
                self.state = 602
                _la = self._input.LA(1)
                if not(_la==3 or _la==4):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(FSharpParser.SET, 0)

        def expression(self):
            return self.getTypedRuleContext(FSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return FSharpParser.RULE_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet" ):
                listener.enterSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet" ):
                listener.exitSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet" ):
                return visitor.visitSet(self)
            else:
                return visitor.visitChildren(self)




    def set_(self):

        localctx = FSharpParser.SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(FSharpParser.SET)
            self.state = 606
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Async_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(FSharpParser.ASYNC, 0)

        def OPEN_BRACE(self):
            return self.getToken(FSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FSharpParser.CLOSE_BRACE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_async_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsync_rule" ):
                listener.enterAsync_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsync_rule" ):
                listener.exitAsync_rule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsync_rule" ):
                return visitor.visitAsync_rule(self)
            else:
                return visitor.visitChildren(self)




    def async_rule(self):

        localctx = FSharpParser.Async_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_async_rule)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(FSharpParser.ASYNC)
            self.state = 609
            self.match(FSharpParser.OPEN_BRACE)
            self.state = 613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4648022701282164776) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 6919192313721) != 0):
                self.state = 610
                self.expression()
                self.state = 615
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 616
            self.match(FSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TASK(self):
            return self.getToken(FSharpParser.TASK, 0)

        def OPEN_BRACE(self):
            return self.getToken(FSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FSharpParser.CLOSE_BRACE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_task

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTask" ):
                listener.enterTask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTask" ):
                listener.exitTask(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTask" ):
                return visitor.visitTask(self)
            else:
                return visitor.visitChildren(self)




    def task(self):

        localctx = FSharpParser.TaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_task)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.match(FSharpParser.TASK)
            self.state = 619
            self.match(FSharpParser.OPEN_BRACE)
            self.state = 623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4648022701282164776) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 6919192313721) != 0):
                self.state = 620
                self.expression()
                self.state = 625
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 626
            self.match(FSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exclamation_markContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLAMATION_MARK(self):
            return self.getToken(FSharpParser.EXCLAMATION_MARK, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_exclamation_mark

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclamation_mark" ):
                listener.enterExclamation_mark(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclamation_mark" ):
                listener.exitExclamation_mark(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExclamation_mark" ):
                return visitor.visitExclamation_mark(self)
            else:
                return visitor.visitChildren(self)




    def exclamation_mark(self):

        localctx = FSharpParser.Exclamation_markContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_exclamation_mark)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.match(FSharpParser.EXCLAMATION_MARK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Match_withContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(FSharpParser.MATCH, 0)

        def WITH(self):
            return self.getToken(FSharpParser.WITH, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def match_case(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.Match_caseContext)
            else:
                return self.getTypedRuleContext(FSharpParser.Match_caseContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_match_with

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatch_with" ):
                listener.enterMatch_with(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatch_with" ):
                listener.exitMatch_with(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatch_with" ):
                return visitor.visitMatch_with(self)
            else:
                return visitor.visitChildren(self)




    def match_with(self):

        localctx = FSharpParser.Match_withContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_match_with)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 630
            self.match(FSharpParser.MATCH)
            self.state = 632 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 631
                    self.expression()

                else:
                    raise NoViableAltException(self)
                self.state = 634 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

            self.state = 636
            self.match(FSharpParser.WITH)
            self.state = 638 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 637
                    self.match_case()

                else:
                    raise NoViableAltException(self)
                self.state = 640 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Match_caseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERTICAL_LINE(self):
            return self.getToken(FSharpParser.VERTICAL_LINE, 0)

        def RIGHT_ARROW(self):
            return self.getToken(FSharpParser.RIGHT_ARROW, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def cond_ops(self):
            return self.getTypedRuleContext(FSharpParser.Cond_opsContext,0)


        def getRuleIndex(self):
            return FSharpParser.RULE_match_case

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatch_case" ):
                listener.enterMatch_case(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatch_case" ):
                listener.exitMatch_case(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatch_case" ):
                return visitor.visitMatch_case(self)
            else:
                return visitor.visitChildren(self)




    def match_case(self):

        localctx = FSharpParser.Match_caseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_match_case)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.match(FSharpParser.VERTICAL_LINE)
            self.state = 644 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 643
                self.expression()
                self.state = 646 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -4648022701282164776) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 6919192313721) != 0)):
                    break

            self.state = 648
            self.match(FSharpParser.RIGHT_ARROW)
            self.state = 650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 649
                self.cond_ops()


            self.state = 653 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 652
                    self.expression()

                else:
                    raise NoViableAltException(self)
                self.state = 655 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_with_finallyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(FSharpParser.TRY, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def WITH(self):
            return self.getToken(FSharpParser.WITH, 0)

        def FINALLY(self):
            return self.getToken(FSharpParser.FINALLY, 0)

        def VERTICAL_LINE(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.VERTICAL_LINE)
            else:
                return self.getToken(FSharpParser.VERTICAL_LINE, i)

        def RIGHT_ARROW(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.RIGHT_ARROW)
            else:
                return self.getToken(FSharpParser.RIGHT_ARROW, i)

        def getRuleIndex(self):
            return FSharpParser.RULE_try_with_finally

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_with_finally" ):
                listener.enterTry_with_finally(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_with_finally" ):
                listener.exitTry_with_finally(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_with_finally" ):
                return visitor.visitTry_with_finally(self)
            else:
                return visitor.visitChildren(self)




    def try_with_finally(self):

        localctx = FSharpParser.Try_with_finallyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_try_with_finally)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self.match(FSharpParser.TRY)
            self.state = 661
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 658
                    self.expression() 
                self.state = 663
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

            self.state = 684
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 664
                self.match(FSharpParser.WITH)
                self.state = 681
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 665
                        self.match(FSharpParser.VERTICAL_LINE)
                        self.state = 669
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4648022701282164776) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 6919192313721) != 0):
                            self.state = 666
                            self.expression()
                            self.state = 671
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 672
                        self.match(FSharpParser.RIGHT_ARROW)
                        self.state = 676
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 673
                                self.expression() 
                            self.state = 678
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
                 
                    self.state = 683
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,65,self._ctx)



            self.state = 688
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 686
                self.match(FSharpParser.FINALLY)
                self.state = 687
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(FSharpParser.USE, 0)

        def EQUAL(self):
            return self.getToken(FSharpParser.EQUAL, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_use

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse" ):
                listener.enterUse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse" ):
                listener.exitUse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUse" ):
                return visitor.visitUse(self)
            else:
                return visitor.visitChildren(self)




    def use(self):

        localctx = FSharpParser.UseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_use)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.match(FSharpParser.USE)
            self.state = 694
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 691
                    self.expression() 
                self.state = 696
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

            self.state = 697
            self.match(FSharpParser.EQUAL)
            self.state = 698
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(FSharpParser.USING, 0)

        def round_brackets(self):
            return self.getTypedRuleContext(FSharpParser.Round_bracketsContext,0)


        def expression(self):
            return self.getTypedRuleContext(FSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return FSharpParser.RULE_using

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing" ):
                listener.enterUsing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing" ):
                listener.exitUsing(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsing" ):
                return visitor.visitUsing(self)
            else:
                return visitor.visitChildren(self)




    def using(self):

        localctx = FSharpParser.UsingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_using)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.match(FSharpParser.USING)
            self.state = 701
            self.round_brackets()
            self.state = 702
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RaiseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(FSharpParser.RAISE, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_raise

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise" ):
                listener.enterRaise(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise" ):
                listener.exitRaise(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise" ):
                return visitor.visitRaise(self)
            else:
                return visitor.visitChildren(self)




    def raise_(self):

        localctx = FSharpParser.RaiseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_raise)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.match(FSharpParser.RAISE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReraiseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RERAISE(self):
            return self.getToken(FSharpParser.RERAISE, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_reraise

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReraise" ):
                listener.enterReraise(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReraise" ):
                listener.exitReraise(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReraise" ):
                return visitor.visitReraise(self)
            else:
                return visitor.visitChildren(self)




    def reraise(self):

        localctx = FSharpParser.ReraiseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_reraise)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self.match(FSharpParser.RERAISE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FailwithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FAILWITH(self):
            return self.getToken(FSharpParser.FAILWITH, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_failwith

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFailwith" ):
                listener.enterFailwith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFailwith" ):
                listener.exitFailwith(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFailwith" ):
                return visitor.visitFailwith(self)
            else:
                return visitor.visitChildren(self)




    def failwith(self):

        localctx = FSharpParser.FailwithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_failwith)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.match(FSharpParser.FAILWITH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InvalidArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INVALIDARG(self):
            return self.getToken(FSharpParser.INVALIDARG, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_invalidArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvalidArg" ):
                listener.enterInvalidArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvalidArg" ):
                listener.exitInvalidArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvalidArg" ):
                return visitor.visitInvalidArg(self)
            else:
                return visitor.visitChildren(self)




    def invalidArg(self):

        localctx = FSharpParser.InvalidArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_invalidArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.match(FSharpParser.INVALIDARG)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exception_ofContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPTION(self):
            return self.getToken(FSharpParser.EXCEPTION, 0)

        def OF(self):
            return self.getToken(FSharpParser.OF, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_exception_of

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_of" ):
                listener.enterException_of(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_of" ):
                listener.exitException_of(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitException_of" ):
                return visitor.visitException_of(self)
            else:
                return visitor.visitChildren(self)




    def exception_of(self):

        localctx = FSharpParser.Exception_ofContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_exception_of)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.match(FSharpParser.EXCEPTION)
            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4648022701282164776) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 6919192313721) != 0):
                self.state = 713
                self.expression()
                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 719
            self.match(FSharpParser.OF)
            self.state = 720
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(FSharpParser.MEMBER, 0)

        def dot(self):
            return self.getTypedRuleContext(FSharpParser.DotContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(FSharpParser.IdentifierContext,i)


        def equal(self):
            return self.getTypedRuleContext(FSharpParser.EqualContext,0)


        def expression(self):
            return self.getTypedRuleContext(FSharpParser.ExpressionContext,0)


        def THIS(self):
            return self.getToken(FSharpParser.THIS, 0)

        def unit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.UnitContext)
            else:
                return self.getTypedRuleContext(FSharpParser.UnitContext,i)


        def MISSING_ARG(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.MISSING_ARG)
            else:
                return self.getToken(FSharpParser.MISSING_ARG, i)

        def getRuleIndex(self):
            return FSharpParser.RULE_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember" ):
                listener.enterMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember" ):
                listener.exitMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMember" ):
                return visitor.visitMember(self)
            else:
                return visitor.visitChildren(self)




    def member(self):

        localctx = FSharpParser.MemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_member)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.match(FSharpParser.MEMBER)
            self.state = 729
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.state = 723
                self.match(FSharpParser.THIS)
                pass
            elif token in [71]:
                self.state = 725 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 724
                    self.match(FSharpParser.MISSING_ARG)
                    self.state = 727 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==71):
                        break

                pass
            else:
                raise NoViableAltException(self)

            self.state = 731
            self.dot()
            self.state = 732
            self.identifier()
            self.state = 737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==10 or _la==107:
                self.state = 735
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [107]:
                    self.state = 733
                    self.identifier()
                    pass
                elif token in [10]:
                    self.state = 734
                    self.unit()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 739
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 740
            self.equal()
            self.state = 741
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAL(self):
            return self.getToken(FSharpParser.VAL, 0)

        def dotIentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.DotIentifierContext)
            else:
                return self.getTypedRuleContext(FSharpParser.DotIentifierContext,i)


        def COLON(self):
            return self.getToken(FSharpParser.COLON, 0)

        def mutable(self):
            return self.getTypedRuleContext(FSharpParser.MutableContext,0)


        def internal(self):
            return self.getTypedRuleContext(FSharpParser.InternalContext,0)


        def public(self):
            return self.getTypedRuleContext(FSharpParser.PublicContext,0)


        def private(self):
            return self.getTypedRuleContext(FSharpParser.PrivateContext,0)


        def getRuleIndex(self):
            return FSharpParser.RULE_val

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVal" ):
                listener.enterVal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVal" ):
                listener.exitVal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVal" ):
                return visitor.visitVal(self)
            else:
                return visitor.visitChildren(self)




    def val(self):

        localctx = FSharpParser.ValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_val)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.match(FSharpParser.VAL)
            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 744
                self.mutable()


            self.state = 750
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.state = 747
                self.internal()
                pass
            elif token in [12]:
                self.state = 748
                self.public()
                pass
            elif token in [13]:
                self.state = 749
                self.private()
                pass
            elif token in [107]:
                pass
            else:
                pass
            self.state = 752
            self.dotIentifier()
            self.state = 753
            self.match(FSharpParser.COLON)
            self.state = 754
            self.dotIentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(FSharpParser.STRUCT, 0)

        def END(self):
            return self.getToken(FSharpParser.END, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_struct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct" ):
                listener.enterStruct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct" ):
                listener.exitStruct(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct" ):
                return visitor.visitStruct(self)
            else:
                return visitor.visitChildren(self)




    def struct(self):

        localctx = FSharpParser.StructContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_struct)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self.match(FSharpParser.STRUCT)
            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4648022701282164776) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 6919192313721) != 0):
                self.state = 757
                self.expression()
                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 763
            self.match(FSharpParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_get_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(FSharpParser.WITH, 0)

        def GET(self):
            return self.getToken(FSharpParser.GET, 0)

        def UNIT(self):
            return self.getToken(FSharpParser.UNIT, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.EQUAL)
            else:
                return self.getToken(FSharpParser.EQUAL, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def AND(self):
            return self.getToken(FSharpParser.AND, 0)

        def private(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.PrivateContext)
            else:
                return self.getTypedRuleContext(FSharpParser.PrivateContext,i)


        def internal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.InternalContext)
            else:
                return self.getTypedRuleContext(FSharpParser.InternalContext,i)


        def public(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.PublicContext)
            else:
                return self.getTypedRuleContext(FSharpParser.PublicContext,i)


        def SET(self):
            return self.getToken(FSharpParser.SET, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_with_get_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_get_set" ):
                listener.enterWith_get_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_get_set" ):
                listener.exitWith_get_set(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_get_set" ):
                return visitor.visitWith_get_set(self)
            else:
                return visitor.visitChildren(self)




    def with_get_set(self):

        localctx = FSharpParser.With_get_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_with_get_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 765
                self.match(FSharpParser.WITH)

                self.state = 769
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 766
                    self.private()
                    pass
                elif token in [14]:
                    self.state = 767
                    self.internal()
                    pass
                elif token in [12]:
                    self.state = 768
                    self.public()
                    pass
                elif token in [34]:
                    pass
                else:
                    pass
                self.state = 771
                self.match(FSharpParser.GET)
                self.state = 772
                self.match(FSharpParser.UNIT)
                self.state = 773
                self.match(FSharpParser.EQUAL)
                self.state = 774
                self.expression()

                self.state = 776
                self.match(FSharpParser.AND)
                self.state = 791
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 780
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [13]:
                        self.state = 777
                        self.private()
                        pass
                    elif token in [14]:
                        self.state = 778
                        self.internal()
                        pass
                    elif token in [12]:
                        self.state = 779
                        self.public()
                        pass
                    elif token in [48]:
                        pass
                    else:
                        pass
                    self.state = 782
                    self.match(FSharpParser.SET)
                    self.state = 786
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 783
                            self.expression() 
                        self.state = 788
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

                    self.state = 789
                    self.match(FSharpParser.EQUAL)
                    self.state = 790
                    self.expression()


                pass

            elif la_ == 2:
                self.state = 793
                self.match(FSharpParser.WITH)
                self.state = 797
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 794
                    self.private()

                elif la_ == 2:
                    self.state = 795
                    self.internal()

                elif la_ == 3:
                    self.state = 796
                    self.public()


                self.state = 802
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 799
                        self.expression() 
                    self.state = 804
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

                self.state = 805
                self.match(FSharpParser.EQUAL)
                self.state = 806
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FSharpParser.OPEN_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(FSharpParser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.COMMA)
            else:
                return self.getToken(FSharpParser.COMMA, i)

        def getRuleIndex(self):
            return FSharpParser.RULE_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple" ):
                listener.enterTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple" ):
                listener.exitTuple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTuple" ):
                return visitor.visitTuple(self)
            else:
                return visitor.visitChildren(self)




    def tuple_(self):

        localctx = FSharpParser.TupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_tuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self.match(FSharpParser.OPEN_PAREN)
            self.state = 810
            self.expression()
            self.state = 813 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 811
                self.match(FSharpParser.COMMA)
                self.state = 812
                self.expression()
                self.state = 815 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==66):
                    break

            self.state = 817
            self.match(FSharpParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(FSharpParser.WITH, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_with

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith" ):
                listener.enterWith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith" ):
                listener.exitWith(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith" ):
                return visitor.visitWith(self)
            else:
                return visitor.visitChildren(self)




    def with_(self):

        localctx = FSharpParser.WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_with)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self.match(FSharpParser.WITH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(FSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FSharpParser.CLOSE_BRACE, 0)

        def with_(self):
            return self.getTypedRuleContext(FSharpParser.WithContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.COLON)
            else:
                return self.getToken(FSharpParser.COLON, i)

        def dotIentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.DotIentifierContext)
            else:
                return self.getTypedRuleContext(FSharpParser.DotIentifierContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_record

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord" ):
                listener.enterRecord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord" ):
                listener.exitRecord(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord" ):
                return visitor.visitRecord(self)
            else:
                return visitor.visitChildren(self)




    def record(self):

        localctx = FSharpParser.RecordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_record)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.match(FSharpParser.OPEN_BRACE)
            self.state = 844
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4648022701282164776) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 6919192313721) != 0):
                    self.state = 822
                    self.expression()
                    self.state = 823
                    self.match(FSharpParser.COLON)
                    self.state = 824
                    self.dotIentifier()
                    self.state = 830
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 834
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 831
                        self.expression() 
                    self.state = 836
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

                self.state = 837
                self.with_()
                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4648022701282164776) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 6919192313721) != 0):
                    self.state = 838
                    self.expression()
                    self.state = 843
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 846
            self.match(FSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(FSharpParser.OF, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_of

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOf" ):
                listener.enterOf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOf" ):
                listener.exitOf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOf" ):
                return visitor.visitOf(self)
            else:
                return visitor.visitChildren(self)




    def of(self):

        localctx = FSharpParser.OfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_of)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.match(FSharpParser.OF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERTICAL_LINE(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.VERTICAL_LINE)
            else:
                return self.getToken(FSharpParser.VERTICAL_LINE, i)

        def dotIentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.DotIentifierContext)
            else:
                return self.getTypedRuleContext(FSharpParser.DotIentifierContext,i)


        def equal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.EqualContext)
            else:
                return self.getTypedRuleContext(FSharpParser.EqualContext,i)


        def of(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.OfContext)
            else:
                return self.getTypedRuleContext(FSharpParser.OfContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_enum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum" ):
                listener.enterEnum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum" ):
                listener.exitEnum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum" ):
                return visitor.visitEnum(self)
            else:
                return visitor.visitChildren(self)




    def enum(self):

        localctx = FSharpParser.EnumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_enum)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 850
                    self.match(FSharpParser.VERTICAL_LINE)
                    self.state = 851
                    self.dotIentifier()
                    self.state = 854
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [80]:
                        self.state = 852
                        self.equal()
                        pass
                    elif token in [62]:
                        self.state = 853
                        self.of()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 856
                    self.dotIentifier()

                else:
                    raise NoViableAltException(self)
                self.state = 860 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InheritContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INHERIT(self):
            return self.getToken(FSharpParser.INHERIT, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_inherit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInherit" ):
                listener.enterInherit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInherit" ):
                listener.exitInherit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInherit" ):
                return visitor.visitInherit(self)
            else:
                return visitor.visitChildren(self)




    def inherit(self):

        localctx = FSharpParser.InheritContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_inherit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.match(FSharpParser.INHERIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(FSharpParser.DEFAULT, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault" ):
                listener.enterDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault" ):
                listener.exitDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault" ):
                return visitor.visitDefault(self)
            else:
                return visitor.visitChildren(self)




    def default(self):

        localctx = FSharpParser.DefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_default)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self.match(FSharpParser.DEFAULT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverrideContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVERRIDE(self):
            return self.getToken(FSharpParser.OVERRIDE, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_override

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverride" ):
                listener.enterOverride(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverride" ):
                listener.exitOverride(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverride" ):
                return visitor.visitOverride(self)
            else:
                return visitor.visitChildren(self)




    def override(self):

        localctx = FSharpParser.OverrideContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_override)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.match(FSharpParser.OVERRIDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABSTRACT(self):
            return self.getToken(FSharpParser.ABSTRACT, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_abstract

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstract" ):
                listener.enterAbstract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstract" ):
                listener.exitAbstract(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbstract" ):
                return visitor.visitAbstract(self)
            else:
                return visitor.visitChildren(self)




    def abstract(self):

        localctx = FSharpParser.AbstractContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_abstract)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.match(FSharpParser.ABSTRACT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BASE(self):
            return self.getToken(FSharpParser.BASE, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase" ):
                listener.enterBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase" ):
                listener.exitBase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBase" ):
                return visitor.visitBase(self)
            else:
                return visitor.visitChildren(self)




    def base(self):

        localctx = FSharpParser.BaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_base)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self.match(FSharpParser.BASE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Colon_qContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON_Q(self):
            return self.getToken(FSharpParser.COLON_Q, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_colon_q

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColon_q" ):
                listener.enterColon_q(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColon_q" ):
                listener.exitColon_q(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColon_q" ):
                return visitor.visitColon_q(self)
            else:
                return visitor.visitChildren(self)




    def colon_q(self):

        localctx = FSharpParser.Colon_qContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_colon_q)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            self.match(FSharpParser.COLON_Q)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(FSharpParser.INTERFACE, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_interface

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface" ):
                listener.enterInterface(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface" ):
                listener.exitInterface(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterface" ):
                return visitor.visitInterface(self)
            else:
                return visitor.visitChildren(self)




    def interface(self):

        localctx = FSharpParser.InterfaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_interface)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.match(FSharpParser.INTERFACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cond_opsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_then_elif_else(self):
            return self.getTypedRuleContext(FSharpParser.If_then_elif_elseContext,0)


        def while_do(self):
            return self.getTypedRuleContext(FSharpParser.While_doContext,0)


        def for_(self):
            return self.getTypedRuleContext(FSharpParser.ForContext,0)


        def match_with(self):
            return self.getTypedRuleContext(FSharpParser.Match_withContext,0)


        def getRuleIndex(self):
            return FSharpParser.RULE_cond_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond_ops" ):
                listener.enterCond_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond_ops" ):
                listener.exitCond_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCond_ops" ):
                return visitor.visitCond_ops(self)
            else:
                return visitor.visitChildren(self)




    def cond_ops(self):

        localctx = FSharpParser.Cond_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_cond_ops)
        try:
            self.state = 880
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103]:
                self.enterOuterAlt(localctx, 1)
                self.state = 876
                self.if_then_elif_else()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 877
                self.while_do()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 3)
                self.state = 878
                self.for_()
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 4)
                self.state = 879
                self.match_with()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotIentifier(self):
            return self.getTypedRuleContext(FSharpParser.DotIentifierContext,0)


        def dot(self):
            return self.getTypedRuleContext(FSharpParser.DotContext,0)


        def int_(self):
            return self.getTypedRuleContext(FSharpParser.IntContext,0)


        def float_(self):
            return self.getTypedRuleContext(FSharpParser.FloatContext,0)


        def bool_(self):
            return self.getTypedRuleContext(FSharpParser.BoolContext,0)


        def char(self):
            return self.getTypedRuleContext(FSharpParser.CharContext,0)


        def unit(self):
            return self.getTypedRuleContext(FSharpParser.UnitContext,0)


        def underscore(self):
            return self.getTypedRuleContext(FSharpParser.UnderscoreContext,0)


        def string(self):
            return self.getTypedRuleContext(FSharpParser.StringContext,0)


        def attribute(self):
            return self.getTypedRuleContext(FSharpParser.AttributeContext,0)


        def generic(self):
            return self.getTypedRuleContext(FSharpParser.GenericContext,0)


        def let_fun(self):
            return self.getTypedRuleContext(FSharpParser.Let_funContext,0)


        def let_var(self):
            return self.getTypedRuleContext(FSharpParser.Let_varContext,0)


        def round_brackets(self):
            return self.getTypedRuleContext(FSharpParser.Round_bracketsContext,0)


        def rec(self):
            return self.getTypedRuleContext(FSharpParser.RecContext,0)


        def public(self):
            return self.getTypedRuleContext(FSharpParser.PublicContext,0)


        def private(self):
            return self.getTypedRuleContext(FSharpParser.PrivateContext,0)


        def internal(self):
            return self.getTypedRuleContext(FSharpParser.InternalContext,0)


        def mutable(self):
            return self.getTypedRuleContext(FSharpParser.MutableContext,0)


        def fun(self):
            return self.getTypedRuleContext(FSharpParser.FunContext,0)


        def typezation(self):
            return self.getTypedRuleContext(FSharpParser.TypezationContext,0)


        def if_then_elif_else(self):
            return self.getTypedRuleContext(FSharpParser.If_then_elif_elseContext,0)


        def while_do(self):
            return self.getTypedRuleContext(FSharpParser.While_doContext,0)


        def for_(self):
            return self.getTypedRuleContext(FSharpParser.ForContext,0)


        def add(self):
            return self.getTypedRuleContext(FSharpParser.AddContext,0)


        def mul(self):
            return self.getTypedRuleContext(FSharpParser.MulContext,0)


        def div(self):
            return self.getTypedRuleContext(FSharpParser.DivContext,0)


        def minus(self):
            return self.getTypedRuleContext(FSharpParser.MinusContext,0)


        def pow_(self):
            return self.getTypedRuleContext(FSharpParser.PowContext,0)


        def mod(self):
            return self.getTypedRuleContext(FSharpParser.ModContext,0)


        def not_equal(self):
            return self.getTypedRuleContext(FSharpParser.Not_equalContext,0)


        def less(self):
            return self.getTypedRuleContext(FSharpParser.LessContext,0)


        def less_equal(self):
            return self.getTypedRuleContext(FSharpParser.Less_equalContext,0)


        def greater(self):
            return self.getTypedRuleContext(FSharpParser.GreaterContext,0)


        def greater_equal(self):
            return self.getTypedRuleContext(FSharpParser.Greater_equalContext,0)


        def equal(self):
            return self.getTypedRuleContext(FSharpParser.EqualContext,0)


        def and_(self):
            return self.getTypedRuleContext(FSharpParser.AndContext,0)


        def or_(self):
            return self.getTypedRuleContext(FSharpParser.OrContext,0)


        def lshift(self):
            return self.getTypedRuleContext(FSharpParser.LshiftContext,0)


        def rshift(self):
            return self.getTypedRuleContext(FSharpParser.RshiftContext,0)


        def log_mul(self):
            return self.getTypedRuleContext(FSharpParser.Log_mulContext,0)


        def log_add(self):
            return self.getTypedRuleContext(FSharpParser.Log_addContext,0)


        def log_xor(self):
            return self.getTypedRuleContext(FSharpParser.Log_xorContext,0)


        def log_not(self):
            return self.getTypedRuleContext(FSharpParser.Log_notContext,0)


        def not_(self):
            return self.getTypedRuleContext(FSharpParser.NotContext,0)


        def pipe(self):
            return self.getTypedRuleContext(FSharpParser.PipeContext,0)


        def compos(self):
            return self.getTypedRuleContext(FSharpParser.ComposContext,0)


        def assign(self):
            return self.getTypedRuleContext(FSharpParser.AssignContext,0)


        def fun_type(self):
            return self.getTypedRuleContext(FSharpParser.Fun_typeContext,0)


        def type_(self):
            return self.getTypedRuleContext(FSharpParser.TypeContext,0)


        def module(self):
            return self.getTypedRuleContext(FSharpParser.ModuleContext,0)


        def open_(self):
            return self.getTypedRuleContext(FSharpParser.OpenContext,0)


        def namespace(self):
            return self.getTypedRuleContext(FSharpParser.NamespaceContext,0)


        def class_(self):
            return self.getTypedRuleContext(FSharpParser.ClassContext,0)


        def do(self):
            return self.getTypedRuleContext(FSharpParser.DoContext,0)


        def new(self):
            return self.getTypedRuleContext(FSharpParser.NewContext,0)


        def seq(self):
            return self.getTypedRuleContext(FSharpParser.SeqContext,0)


        def generator(self):
            return self.getTypedRuleContext(FSharpParser.GeneratorContext,0)


        def list_(self):
            return self.getTypedRuleContext(FSharpParser.ListContext,0)


        def array(self):
            return self.getTypedRuleContext(FSharpParser.ArrayContext,0)


        def map_(self):
            return self.getTypedRuleContext(FSharpParser.MapContext,0)


        def async_rule(self):
            return self.getTypedRuleContext(FSharpParser.Async_ruleContext,0)


        def task(self):
            return self.getTypedRuleContext(FSharpParser.TaskContext,0)


        def exclamation_mark(self):
            return self.getTypedRuleContext(FSharpParser.Exclamation_markContext,0)


        def match_with(self):
            return self.getTypedRuleContext(FSharpParser.Match_withContext,0)


        def try_with_finally(self):
            return self.getTypedRuleContext(FSharpParser.Try_with_finallyContext,0)


        def use(self):
            return self.getTypedRuleContext(FSharpParser.UseContext,0)


        def using(self):
            return self.getTypedRuleContext(FSharpParser.UsingContext,0)


        def raise_(self):
            return self.getTypedRuleContext(FSharpParser.RaiseContext,0)


        def reraise(self):
            return self.getTypedRuleContext(FSharpParser.ReraiseContext,0)


        def failwith(self):
            return self.getTypedRuleContext(FSharpParser.FailwithContext,0)


        def invalidArg(self):
            return self.getTypedRuleContext(FSharpParser.InvalidArgContext,0)


        def exception_of(self):
            return self.getTypedRuleContext(FSharpParser.Exception_ofContext,0)


        def member(self):
            return self.getTypedRuleContext(FSharpParser.MemberContext,0)


        def val(self):
            return self.getTypedRuleContext(FSharpParser.ValContext,0)


        def struct(self):
            return self.getTypedRuleContext(FSharpParser.StructContext,0)


        def with_get_set(self):
            return self.getTypedRuleContext(FSharpParser.With_get_setContext,0)


        def tuple_(self):
            return self.getTypedRuleContext(FSharpParser.TupleContext,0)


        def with_(self):
            return self.getTypedRuleContext(FSharpParser.WithContext,0)


        def record(self):
            return self.getTypedRuleContext(FSharpParser.RecordContext,0)


        def enum(self):
            return self.getTypedRuleContext(FSharpParser.EnumContext,0)


        def inherit(self):
            return self.getTypedRuleContext(FSharpParser.InheritContext,0)


        def default(self):
            return self.getTypedRuleContext(FSharpParser.DefaultContext,0)


        def override(self):
            return self.getTypedRuleContext(FSharpParser.OverrideContext,0)


        def abstract(self):
            return self.getTypedRuleContext(FSharpParser.AbstractContext,0)


        def base(self):
            return self.getTypedRuleContext(FSharpParser.BaseContext,0)


        def colon_q(self):
            return self.getTypedRuleContext(FSharpParser.Colon_qContext,0)


        def interpolated_string(self):
            return self.getTypedRuleContext(FSharpParser.Interpolated_stringContext,0)


        def interface(self):
            return self.getTypedRuleContext(FSharpParser.InterfaceContext,0)


        def when(self):
            return self.getTypedRuleContext(FSharpParser.WhenContext,0)


        def getRuleIndex(self):
            return FSharpParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = FSharpParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_expression)
        try:
            self.state = 972
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 882
                self.dotIentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 883
                self.dot()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 884
                self.int_()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 885
                self.float_()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 886
                self.bool_()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 887
                self.char()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 888
                self.unit()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 889
                self.underscore()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 890
                self.string()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 891
                self.attribute()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 892
                self.generic()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 893
                self.let_fun()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 894
                self.let_var()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 895
                self.round_brackets()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 896
                self.rec()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 897
                self.public()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 898
                self.private()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 899
                self.internal()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 900
                self.mutable()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 901
                self.fun()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 902
                self.typezation()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 903
                self.if_then_elif_else()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 904
                self.while_do()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 905
                self.for_()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 906
                self.add()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 907
                self.mul()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 908
                self.div()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 909
                self.minus()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 910
                self.pow_()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 911
                self.mod()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 912
                self.not_equal()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 913
                self.less()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 914
                self.less_equal()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 915
                self.greater()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 916
                self.greater_equal()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 917
                self.equal()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 918
                self.and_()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 919
                self.or_()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 920
                self.lshift()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 921
                self.rshift()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 922
                self.log_mul()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 923
                self.log_add()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 924
                self.log_xor()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 925
                self.log_not()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 926
                self.not_()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 927
                self.pipe()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 928
                self.compos()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 929
                self.assign()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 930
                self.fun_type()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 931
                self.type_()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 932
                self.module()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 933
                self.open_()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 934
                self.namespace()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 935
                self.class_()
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 936
                self.do()
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 937
                self.new()
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 938
                self.seq()
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 939
                self.generator()
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 940
                self.list_()
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 941
                self.array()
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 942
                self.map_()
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 943
                self.async_rule()
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 944
                self.task()
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 945
                self.exclamation_mark()
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 946
                self.match_with()
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 947
                self.try_with_finally()
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 948
                self.use()
                pass

            elif la_ == 68:
                self.enterOuterAlt(localctx, 68)
                self.state = 949
                self.using()
                pass

            elif la_ == 69:
                self.enterOuterAlt(localctx, 69)
                self.state = 950
                self.raise_()
                pass

            elif la_ == 70:
                self.enterOuterAlt(localctx, 70)
                self.state = 951
                self.reraise()
                pass

            elif la_ == 71:
                self.enterOuterAlt(localctx, 71)
                self.state = 952
                self.failwith()
                pass

            elif la_ == 72:
                self.enterOuterAlt(localctx, 72)
                self.state = 953
                self.invalidArg()
                pass

            elif la_ == 73:
                self.enterOuterAlt(localctx, 73)
                self.state = 954
                self.exception_of()
                pass

            elif la_ == 74:
                self.enterOuterAlt(localctx, 74)
                self.state = 955
                self.member()
                pass

            elif la_ == 75:
                self.enterOuterAlt(localctx, 75)
                self.state = 956
                self.val()
                pass

            elif la_ == 76:
                self.enterOuterAlt(localctx, 76)
                self.state = 957
                self.struct()
                pass

            elif la_ == 77:
                self.enterOuterAlt(localctx, 77)
                self.state = 958
                self.with_get_set()
                pass

            elif la_ == 78:
                self.enterOuterAlt(localctx, 78)
                self.state = 959
                self.tuple_()
                pass

            elif la_ == 79:
                self.enterOuterAlt(localctx, 79)
                self.state = 960
                self.with_()
                pass

            elif la_ == 80:
                self.enterOuterAlt(localctx, 80)
                self.state = 961
                self.record()
                pass

            elif la_ == 81:
                self.enterOuterAlt(localctx, 81)
                self.state = 962
                self.enum()
                pass

            elif la_ == 82:
                self.enterOuterAlt(localctx, 82)
                self.state = 963
                self.inherit()
                pass

            elif la_ == 83:
                self.enterOuterAlt(localctx, 83)
                self.state = 964
                self.default()
                pass

            elif la_ == 84:
                self.enterOuterAlt(localctx, 84)
                self.state = 965
                self.override()
                pass

            elif la_ == 85:
                self.enterOuterAlt(localctx, 85)
                self.state = 966
                self.abstract()
                pass

            elif la_ == 86:
                self.enterOuterAlt(localctx, 86)
                self.state = 967
                self.base()
                pass

            elif la_ == 87:
                self.enterOuterAlt(localctx, 87)
                self.state = 968
                self.colon_q()
                pass

            elif la_ == 88:
                self.enterOuterAlt(localctx, 88)
                self.state = 969
                self.interpolated_string()
                pass

            elif la_ == 89:
                self.enterOuterAlt(localctx, 89)
                self.state = 970
                self.interface()
                pass

            elif la_ == 90:
                self.enterOuterAlt(localctx, 90)
                self.state = 971
                self.when()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(FSharpParser.EOF, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_exprs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprs" ):
                listener.enterExprs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprs" ):
                listener.exitExprs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprs" ):
                return visitor.visitExprs(self)
            else:
                return visitor.visitChildren(self)




    def exprs(self):

        localctx = FSharpParser.ExprsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_exprs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4648022701282164776) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 6919192313721) != 0):
                self.state = 974
                self.expression()
                self.state = 979
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 980
            self.match(FSharpParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





